package com.arn.ui{	import gs.TweenLite;	import flash.display.MovieClip;	import flash.events.MouseEvent;	/**	 * Horizontal Scroll Bar	 * 	 * - The 'thumb' is a MovieClip that controls the scrollbar	 * - The 'track' is a MovieClip that sets the bounds for the scrollbar	 * 	 * @author 	Derrick Williams, Arnold Worldwide	 * @author	http://arnoldworldwide.com/	 * @version 1.0, ActionScript 3.0	 */	public class HScrollBar extends BaseUIObject	{				// PRIVATE PROPERTIES -----------------------------				private var _xMin		: Number;		private var _xMax		: Number;		private var _xOffset	: Number;				private var _dragging	: Boolean;				// PUBLIC PROPERTIES ------------------------------				public var thumb	: MovieClip;		public var track	: MovieClip;				// CONSTRUCTOR ------------------------------------				public function HScrollBar(){}				//--------------------------------------------------------------------------		//		//  Public Methods		//		//--------------------------------------------------------------------------						//--------------------------------------------------------------------------		//  init		//--------------------------------------------------------------------------				override public function init() : void		{				_xMin = track.x;			_xMax = track.x + track.width - thumb.width;			_dragging = false;			thumb.buttonMode = true;						addEventListener( MouseEvent.MOUSE_WHEEL, onMouseMove );			thumb.addEventListener( MouseEvent.MOUSE_DOWN, onThumbDown );			stage.addEventListener( MouseEvent.MOUSE_UP, onThumbUp );			moveThumb( 0 );		}				//--------------------------------------------------------------------------		//  moveThumb		//--------------------------------------------------------------------------				/**		 * Moves the thumb to the given value along the track.		 * If animate is true, then the thumb will tween to the		 * given value.		 * 		 * @param	value	The position of the thumb.		 * @param	animate	If true, the thumb will tween to the value.		 */		public function moveThumb( value:Number, animate:Boolean = false) : void		{			if(!animate) {				thumb.x = value;								// Make sure thumb doesn't pass the track bounds				if (thumb.x <= _xMin)					thumb.x = _xMin;				if (thumb.x >= _xMax)					thumb.x = _xMax;									update( _dragging );			} else {				TweenLite.to(thumb, .5, {x: value, onUpdate: update});			}		}				/**		 * Sets the position of the thumb cursor via a percentage, not X position		 */		public function setPosition( value: Number, animate:Boolean = false ) : void		{			moveThumb( ( _xMax - _xMin ) * value + _xMin, animate );				}				public function getPosition() : Number		{			return thumb.x / _xMax;		}				public function get dragging() : Boolean { return _dragging; }		//--------------------------------------------------------------------------		//  destroy		//--------------------------------------------------------------------------				/**		 * Removes the event listeners from the UI Object and sets the 		 * scrollbar back to 0.		 */		 		override public function destroy() : void		{			removeEventListener( MouseEvent.MOUSE_WHEEL, onMouseMove );			thumb.buttonMode = false;			thumb.removeEventListener( MouseEvent.MOUSE_DOWN, onThumbDown );			stage.removeEventListener( MouseEvent.MOUSE_UP, onThumbUp );						moveThumb( 0 );		}				//--------------------------------------------------------------------------		//		//  Private Methods		//		//--------------------------------------------------------------------------						//--------------------------------------------------------------------------		//  update		//--------------------------------------------------------------------------				/**		 * Dispatches the Scroll Bar event when the thumb is moved.		 */		private function update( isDragging : Boolean ) : void		{			if ( isDragging ) dispatchEvent( new ScrollBarEvent( ScrollBarEvent.DRAG_UPDATE, thumb.x / _xMax) );			else dispatchEvent( new ScrollBarEvent( ScrollBarEvent.CHANGE, thumb.x / _xMax) );		}				//--------------------------------------------------------------------------		//		//  Event Listeners		//		//--------------------------------------------------------------------------						//--------------------------------------------------------------------------		//  onThumbDown		//--------------------------------------------------------------------------				/**		 * Handles the mouse down event for the thumb.		 */		private function onThumbDown( e:MouseEvent ) : void		{			_xOffset = thumb.x - mouseX;			_dragging = true;			stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);		}				//--------------------------------------------------------------------------		//  onThumbUp		//--------------------------------------------------------------------------				/**		 * Handles the mouse up event when the thumb is released.		 */		private function onThumbUp( e:MouseEvent ) : void		{			_dragging = false;			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);		}		//--------------------------------------------------------------------------		//  onMouseMove		//--------------------------------------------------------------------------				/**		 * Handles the mouse move event while the thumb is pressed.		 */		private function onMouseMove( e:MouseEvent ) : void		{			var newX : Number = ( e.type == MouseEvent.MOUSE_WHEEL ) ? (thumb.x - e.delta) : (_xOffset + mouseX);						moveThumb( newX );						e.updateAfterEvent();		}					}}