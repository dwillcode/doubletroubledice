package com.arn.ui {	import com.arn.utils.MathUtils;	import com.arn.utils.ArrayUtils;		import flash.display.*;	import flash.events.*;	import flash.geom.Rectangle;		public class MoveableList extends MovieClip	{		// PRIVATE VARIABLES ------------------------------------		private var _dir			: String;		private var _items			: Array;		private var _locs			: Array;		private var _activeclip 	: MovieClip;				// PUBLIC PROPERTIES ------------------------------------		public var hitstate			: MovieClip;						// CONSTRUCTOR ------------------------------------------		public function MoveableList( dir : String = "horizontal" )		{			_items	= [];			_locs	= [];			_dir	= ( dir == "vertical" ? "y" : "x" );						removeChild(hitstate);		}						// PUBLIC METHODS ---------------------------------------		public function addItem( obj : MovieClip ) : void		{			_items.push( obj );			_items[ _items.length - 1 ].addEventListener( MouseEvent.MOUSE_DOWN, handleItemPress );			_items[ _items.length - 1 ].pos = _items.length - 1;			_locs.push( { x : obj.x, y : obj.y, mc : obj } );					}				public function clearList() : void 		{			for( var i in _items ){				_items[i].removeEventListener( MouseEvent.MOUSE_DOWN, handleItemPress );			}						_items	= [];			_locs	= [];		}						// EVENT LISTENERS --------------------------------------		private function handleItemPress( evt : MouseEvent ) : void		{			var mc	: MovieClip = MovieClip( evt.currentTarget );			_activeclip = mc;						addChildAt( mc, this.numChildren - 1 );			 			if ( hitstate ) {				var top 	: Number = hitstate.y;				var btm		: Number = hitstate.height + hitstate.y;				var rgt		: Number = hitstate.x + hitstate.width;				var lft		: Number = hitstate.x;				mc.startDrag( false, new flash.geom.Rectangle(lft, top, rgt, btm) );			} else {				mc.startDrag();			}						_activeclip.stage.addEventListener( MouseEvent.MOUSE_MOVE, handleMouseMove );			stage.addEventListener( MouseEvent.MOUSE_UP, handleItemRelease  );		}				private function handleItemRelease( evt : MouseEvent ) : void		{			_activeclip.stopDrag();			_activeclip.stage.removeEventListener( MouseEvent.MOUSE_MOVE, handleMouseMove );			_activeclip = null;						renderList();			stage.removeEventListener( MouseEvent.MOUSE_UP, handleItemRelease  );		}				private function handleMouseMove(evt:MouseEvent) : void		{			checkPositions();			}				// PRIVATE METHODS -----------------------------------------		private function checkPositions() : void		{			var nextindex	: Number 	= 0;			var pad			: Number	= 30;						for ( var i=0; i < _items.length; i++ )  {				if ( _items[ i ] != _activeclip || _activeclip == null ) {						if ( MathUtils.checkRange( _activeclip[ _dir ], _items[ i ][ _dir ]-pad, _items[ i ][ _dir ] + pad ) ) {						swapPositions( _activeclip.pos, i );					}								}			}		}				private function swapPositions( pos1 : Number, pos2 : Number ) : void		{			_items = ArrayUtils.swapElements( _items, pos1, pos2 );			_activeclip.pos = pos2;			_items[ pos1 ][ _dir ] = _locs[ pos1 ][ _dir ];		}				private function renderList() : void		{			for ( var i=0; i < _items.length; i++ ) {				_items[ i ].x 		= _locs[ i ].x;				_items[ i ].y 		= _locs[ i ].y;				_items[ i ].pos 	= i;			}						dispatchEvent( new Event( Event.CHANGE ) );		}				// GETTERS/SETTERS --------------------------------------		public function getItemAtPos( n : Number ) : MovieClip		{			return _items[ n ];		}				public function get items() : Array		{			return _items.concat(  );		}				public function get direction() : String 		{			var dir	= ( _dir == "y" ? "vertical" : "horizontal" );			return dir;		}		public function set direction( dir:String ) : void		{			_dir	= ( dir == "vertical" ? "y" : "x" );		}					}}