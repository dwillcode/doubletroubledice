package com.arn.ui{	import flash.display.MovieClip;	import flash.events.Event;		/**	 * Base class for all ui objects.	 * 	 * @author	Derrick Williams	 * @author	http://www.dwillonline.com	 * @version 1.0, ActionScript 3.0	 */	public class BaseUIObject extends MovieClip	{		// PRIVATE PROPERTIES -----------------------------		protected 	var _width	: Number 	= 0;		protected 	var _height	: Number 	= 0;		private 	var _id		: *	 		= null;		private 	var _orig	: Object	= {};						// CONSTANTS --------------------------------------		public static const DRAW	: String = "draw";						// CONSTRUCTOR ------------------------------------		public function BaseUIObject() {			super();						addEventListener( Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true );			addEventListener( Event.REMOVED_FROM_STAGE, onRemovedFromStage, false, 0, true );		}						// PROTECTED METHODS ------------------------------				/**		 * Initializes the component. 		 * Note: Subclasses should override this function.		 */		public function init() : void {			// Warning is raised if subclass doesn not override init()			throw new Error( "WARNING: " + this + " did not override init()" );					// initialise component here.						// 1. manage any child components			// 2. add any event listeners			// 3. initialise any intervals			// 4. initialise any Timers						// 5. draw() state if neccessary		}				/**		 * Abstract draw function.		 * Note: Subclasses should override this function.		 */		protected function draw() : void {			dispatchEvent(new Event(BaseUIObject.DRAW));		}				// PUBLIC METHODS ---------------------------------				/**		 * Prepares the component for garbage collection.		 * Note: Subclasses should override this function.		 */		public function destroy() : void {			// Warning is raised if subclass doesn not override destroy()			throw new Error( "WARNING: " + this + " did not override destroy()" );			// suspend component here.						// 1. manage any child components						// 2. remove all listeners							// 3. stop all sounds			// 4. release all references to cameras and microphones.			// 5. call clearInterval() on any currently running intervals			// 6. call stop() on any running Timer objects									// 7. Close any connected network objects, such as instances of:			//		Loader, URLLoader, Socket, XMLSocket, LocalConnection, NetConnections, and NetStream.		}				/**		 * Moves the component to the specified position.		 * @param xpos the x position to move the component		 * @param ypos the y position to move the component		 */		public function move(xpos:Number, ypos:Number) : void {			x = Math.round(xpos);			y = Math.round(ypos);		}				/**		 * Sets the size of the component.		 * @param w The width of the component.		 * @param h The height of the component.		 */		public function setSize(w:Number, h:Number) : void {			_width 	= w;			_height = h;			draw();		}				// EVENT HANDLERS ---------------------------------				/**		 * Inits this component when it is added to the stage.		 */		private function onAddedToStage(e:Event) : void {			init();		}				/**		 * Stops the current component and prepares it for garbage collection.  		 */		private function onRemovedFromStage(e:Event) : void {			// stop the component timeline playhead			stop();			// remove listeners			//removeEventListener(Event.ENTER_FRAME, onInvalidate);			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						// call component destroy() function			destroy();		}						// GETTERS/SETTERS --------------------------------				/**		 * Sets/gets the width of the component.		 */		override public function set width(w:Number) : void {			_width = w;			draw();			dispatchEvent(new Event(Event.RESIZE));		}		override public function get width() : Number {			return _width;		}				/**		 * Sets/gets the height of the component.		 */		override public function set height(h:Number) : void {			_height = h;			draw();			dispatchEvent(new Event(Event.RESIZE));		}		override public function get height():Number		{			return _height;		}				/**		 * Overrides the setter for x to always place the component on a whole pixel.		 */		override public function set x(value:Number) : void {			super.x = Math.round(value);		}				/**		 * Overrides the setter for y to always place the component on a whole pixel.		 */		override public function set y(value:Number) : void {			super.y = Math.round(value);		}						//--------------------------------------------------------------------------		//  set orig		//--------------------------------------------------------------------------				/**		 * Orig value stores a property stamp of the current UI object.		 */		public function set orig( obj : Object ) : void		{			_orig = obj;		}				//--------------------------------------------------------------------------		//  get orig		//--------------------------------------------------------------------------				/**		 * 		 */		public function get orig() : Object { return _orig; }						/**		 * Gets/Sets the id property for this Animated Button.		 */		public function get id() : * {			return _id;		}				public function set id( id:* ) : void {			_id = id;		}	}	}