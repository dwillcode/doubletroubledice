package com.arn.utils{	import flash.display.*;	import flash.geom.Point;	import flash.utils.getQualifiedClassName;		/**	 * Layout Utils	 * Class that contains static functions to manipulate a display object's position.	 *	 * @author 	Derrick Williams, Arnold Worldwide	 * @author	http://arnoldworldwide.com/	 * @version 1.0, ActionScript 3.0	 */	public class LayoutUtils 	{		/**		 * Positions an object witihin its parent.		 * @param	pObj		The target object to be aligned.		 * @param	pHalign		The horizontal alignment ("left","center","right").		 * @param	pValign		The vertical alignment ("top","middle","bottom").		 * @param	pOffset		The offset values (top, right, bottom, left) that add/subtract space.		 */		public static function alignObject(pObj:DisplayObject, pHalign:String, pValign:String, pOffset:Object) : void		{			var pPoint:Point = LayoutUtils.getAlignmentPoint(pObj, pHalign, pValign, pOffset);			LayoutUtils.moveObject(pObj, pPoint.x, pPoint.y);		}				/**		 * Determines the coordinates of an object based on the alignment parameters.		 * @param	pObj		The target object to be aligned.		 * @param	pHalign		The horizontal alignment ("left","center","right").		 * @param	pValign		The vertical alignment ("top","middle","bottom").		 * @param	pOffset		The offset values (top, right, bottom, left) that add/subtract space.		 * 		 * @return	A point that represents the coordinates of the object 		 */		public static function getAlignmentPoint(pObj:DisplayObject, pHalign:String, pValign:String, pOffset:Object) : Point 		{			var pContainer		: DisplayObjectContainer = pObj.parent;			var pContainerWidth	: Number;			var pContainerHeight: Number;						var pX	: Number = 0;			var pY	: Number = 0;						var pTop	: Number = 0;			var pRight	: Number = 0;			var pBottom	: Number = 0;			var pLeft	: Number = 0;						// if the pObj's parent is the root, use the stage's dimensions for the container height and width			// otherwise, use the pObj's parent's width and height 			if (pContainer == pObj.root) {				pContainerWidth 	= pObj.stage.stageWidth;				pContainerHeight 	= pObj.stage.stageHeight;			} else {				pContainerWidth 	= pContainer.width;				pContainerHeight 	= pContainer.height;			}									// if there are any offset values, set them now			if( pOffset.top != null) 	{ pTop = pOffset.top; }						if( pOffset.right != null) 	{ pRight = pOffset.right; }			if( pOffset.left != null) 	{ pLeft = pOffset.left; }			if( pOffset.bottom != null) { pBottom = pOffset.bottom; }									// set the  horizontal alignment			switch(pHalign) 			{				case Alignment.LEFT:					pX = 0 + pLeft + pRight;					break;								case Alignment.CENTER:					pX = pContainerWidth/2 - pObj.width/2 + pLeft + pRight;					break;									case Alignment.RIGHT: 					pX = pContainerWidth + pLeft - pRight - pObj.width;					break;			}						// set the vertical alignment			switch(pValign)			{				case Alignment.TOP: 					pY = 0 + pTop + pBottom;					break;								case Alignment.MIDDLE:					pY = pContainerHeight/2 - pObj.height/2 + pTop - pBottom;					break;									case Alignment.BOTTOM:					pY = pContainerHeight + pTop - pBottom - pObj.height;					break;			}						return new Point(pX, pY);		}				/**		 * Moves an object.		 * @param	pObj	The object to be moved.		 * @param	pX		The x coordinate of the object.		 * @param	pY		The y coordinate of the object.		 */		public static function moveObject(pObj:DisplayObject, pX:Number, pY:Number) : void 		{			pObj.x = pX;			pObj.y = pY;		}	}}