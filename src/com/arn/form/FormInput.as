package com.arn.form{		import flash.events.*;		/**	 * Class that represents a user input in a form.	 * 	 * @usage	 * <pre>	 * var nameInput:FormInput = new FormInput("name", "TestName", InputType.ALPHA, "Please enter valid name", false);	 * </pre>	 * 	 * @author	Derrick Williams	 * @author	http://www.dwillonline.com	 * @version 1.0, ActionScript 3.0	 */	public class FormInput extends EventDispatcher	{		// PRIVATE PROPERTIES ---------------------------------------------				private var _name		: String;		private var _value		: *;		private var _type		: String;		private var _error		: String;		private var _required	: Boolean;						// EVENT CONSTANTS ------------------------------------------------				public static const VALID 	: String = "valid";		public static const INVALID : String = "invalid";						// CONSTRUCTOR ----------------------------------------------------				/**		 * Creates a new instance of an input object.		 * 		 * @param	pName		Name for the variable to be used in name/value pair		 * @param	pValue		Value for the variable to be used in name/value pair		 * @param	pType		Type of input		 * @param	pError		Error message used when this input is invalid		 * @param	pRequired	(optional) Flag to show if a value is required from this input		 */		public function FormInput ( pName:String,  pType:String = null, pValue:* = null, pError:String = null, pRequired:Boolean = false ) : void 		{			_name 		= pName;			_value 		= pValue;			_type		= pType;			_error		= pError;			_required 	= pRequired;		}				// PUBLIC METHODS ---------------------------------				/**		 * Validates the input value based on what type of input this is		 *		 * @return	True if this input value is valid, false if it is not		 */		public function validate() : Boolean		{			var pValid:Boolean = InputValidator.validate(this.value, this.type, this.required);						//TODO: Add validation for required inputs						if(pValid) {				dispatchEvent(new Event(FormInput.VALID));			} else {				dispatchEvent(new Event(FormInput.INVALID));			}						return pValid;		}				// GETTERS/SETTERS --------------------------------				/**		 * Name of this input		 */		public function get name() : String		{			return _name;			}				public function set name( pName:String ) : void		{			_name = pName;		}					/**		 * Value of this input		 */		public function get value() : String		{			return _value;			}				public function set value( pValue:* ) : void		{			if(pValue is String) {				_value = pValue;			} else {				_value = String(pValue);			}		}				/**		 * Type of input		 */		public function get type() : String		{			return _type;			}				public function set type( pType:String ) : void		{			_type = pType;		}				/**		 * Error message used if this input's value is invalid		 */		public function get error() : String		{			return _error;			}				public function set error( pError:String ) : void		{			_error = pError;		}				/**		 * Flag to show if a value is required from this input		 */		public function get required() : Boolean		{			return _required;			}				public function set required( pRequired:Boolean ) : void		{			_required = pRequired;		}	}}