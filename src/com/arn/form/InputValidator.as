package com.arn.form{			/**	 * Class that contains static utility methods for testing validity of	 * input values.	 * 	 * @author	Derrick Williams	 * @author	http://www.dwillonline.com	 * @version 1.0, ActionScript 3.0	 */	public class InputValidator 	{				// METHODS --------------------------------------------------------				/**		 *	Tests input value for validity based on the type of input		 * 		 *	@param	pValue	The value to be tested		 *	@param	pType	The type of input		 *   		 *	@return	True if the input is valid, false if otherwise		 *		 */		public static function validate( pValue:*, pType:String, pRequired:Boolean) : Boolean		{			var pValid:Boolean = true;						switch( pType ) 			{				case InputType.ALPHA:					pValid = InputValidator.validateAlpha(pValue);					break;									case InputType.NUMBER:					pValid = InputValidator.validateNumber(pValue);					break;									case InputType.ALPHA_NUMERIC:					pValid = InputValidator.validateAlphaNumeric(pValue);					break;										case InputType.EMAIL:					pValid = InputValidator.validateEmail(pValue);					break;									case InputType.MULTIPLE_EMAILS:					pValid = InputValidator.validateMultipleEmails(pValue);					break;										case InputType.PHONE_NUMBER:					pValid = InputValidator.validatePhoneNumber(pValue);					break;										case InputType.ZIP_CODE:					pValid = InputValidator.validateZipCode(pValue);					break;										case InputType.SOCIAL_SECURITY:					pValid = InputValidator.validateSocialSecurity(pValue);					break;										case InputType.URL:					pValid = InputValidator.validateURL(pValue);					break;									default:					pValid = true;					break;			}						if(pRequired && pValid) {				var pPattern:RegExp = /\S+/;				pValid = execPattern( pPattern, pValue);			}						return pValid;					}				/**		 *	Tests input for only numbers		 * 		 *	@param	pValue	The value to be tested		 *   		 *	@return	True if the input is only number, false if otherwise 		 *		 */ 		public static function validateNumber (pValue : * ) : Boolean		{			return	!(isNaN(pValue));		}				/**		 *	Test input for only letters.		 * 		 *	@param	pValue	The value to be tested		 *   		 *	@return	True if the input is only letters, false if otherwise 		 *		 */		public static function validateAlpha (pValue : * ) : Boolean		{			return isNaN(pValue);		}						/**		 *	Test input for only numbers and letters.		 * 		 *	@param	pValue	The value to be tested		 *   		 *	@return	True if the input is only numbers and letters, false if otherwise 		 *		 */		public static function validateAlphaNumeric (pValue : * ) : Boolean		{			var pPattern:RegExp = /^[A-Za-z0-9]+$/;			return execPattern (pPattern, pValue);		}						/**		 *	Tests input as a valid email address.		 * 		 *	@param	pValue	The string to be searched		 *   		 *	@return	True if the input is a valid email address, false if otherwise 		 *		 */		public static function validateEmail ( pValue : String ) : Boolean 		{            var pPattern:RegExp = /(\w|[_.\-])+@((\w|-)+\.)+\w{2,4}+/;            return execPattern( pPattern, pValue);        }						/**		 *	Tests input as a valid multiple email addresses.		 * 		 *	@param	pValue	The string to be searched		 *   		 *	@return	True if the input is a valid email address, false if otherwise 		 *		 */		public static function validateMultipleEmails(pStr:String) : Boolean		{			var delimiter = delimiter || ',';			var filter1:RegExp  = /([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+>?$/;			var filter2:RegExp  = /<([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+>$/;			var filter3:RegExp  = /"[^"]+"\s?<([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+>$/;			var error:int = 0;						// Create an array by splitting the field along the delimiter			var aEmails:Array = pStr.split(",");						// For each of the emails			for(var index:int = 0; index < aEmails.length; index++) {				// Trim spaces from the ends				aEmails[index] = (aEmails[index].replace(/^\s+/,'')).replace(/\s+$/,'');				// Check whether an email is present				if(aEmails[index] != '' && aEmails[index].search(filter1) == -1)					error = 1;				// Check whether brackets are closed				else if(aEmails[index].search(filter1) > -1 && aEmails[index].search(/[<>]/) > -1 && aEmails[index].search(filter2) == -1)					error = 1;				// Check whether brackets are not present when needed				else if(aEmails[index].search(filter1) > -1 && aEmails[index].search(/\s/) > -1 && aEmails[index].search(filter2) == -1)					error = 1;				// Check whether quotes are closed				else if(aEmails[index].search(filter1) > -1 && aEmails[index].search(/"/) > -1 && aEmails[index].search(filter3) == -1)					error = 1;				// Check whether quotes are not present when needed				else if(aEmails[index].search(filter1) > -1 && aEmails[index].search(',') > -1 && aEmails[index].search(filter3) == -1)					error = 1;			}						if(error > 0) {				return false;			}						return true;		}				/**		 *	Tests input as a valid US phone number in ###-###-#### format.		 * 		 *	@param	pValue	The string to be searched		 *   		 *	@return	True if the input is a valid phone number, false if otherwise 		 *		 */        public static function validatePhoneNumber ( pValue : String ) : Boolean 		{            var pPattern:RegExp = /^\d{3}-\d{3}-\d{4}$/;            return execPattern( pPattern, pValue);        }				/**		 *	Tests input as a valid zip code in ##### or #####-#### format.		 * 		 *	@param	pValue	The string to be searched		 *   		 *	@return	True if the input is a valid zip code, false if otherwise 		 *		 */		public static function validateZipCode ( pValue : String ) : Boolean 		{            var pPattern:RegExp = /^\d{5}(-\d{4})?$/;   		   	return execPattern( pPattern, pValue);        }				/**		 *	Tests input as a valid URL with "http://" prefix.		 * 		 *	@param	pValue	The string to be searched		 *   		 *	@return	True if the input is a valid URL, false if otherwise 		 *		 */		public static function validateURL ( pValue : String ) : Boolean		{			var pPattern:RegExp = /http:\/\/+[\S]*/;					return execPattern( pPattern, pValue);		}						/**		 *	Tests input as a valid date.		 * 		 *	@param	pValue	The string to be searched		 *   		 *	@return	True if the input is a valid date, false if otherwise 		 *		 */		public static function validateDate ( pValue : String ) : Boolean		{			var pPattern:RegExp = /^(\d{1,2})\/(\d{1,2})\/(\d{2}|(19|20)\d{2})$/;			return execPattern( pPattern, pValue);		}				/**		 *	Tests input as a valid Social Security number.		 * 		 *	@param	pValue	The string to be searched		 *   		 *	@return	True if the input is a Social Security number, false if otherwise 		 *		 */		public static function validateSocialSecurity ( pValue : String ) : Boolean		{			var pPattern:RegExp = /^\d{3}\s*-?\s*\d{2}\s*-?\s*\d{4}$/;			return execPattern( pPattern, pValue);		}				/*		 *	Performs a search for the given regular expression on the given value.		 *		 *  @param	pPattern	The regular expression pattern		 *	@param	pValue		The string to be searched		 *   		 *	@return	True if the input is a Social Security number, false if otherwise 		 *		 */		private static function execPattern ( pPattern : RegExp, pValue : String ) : Boolean 		{						var result:Object = pPattern.exec(pValue);            			if(result == null) {                return false;            }			            return true;					}		}	}