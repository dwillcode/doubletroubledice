package com.arn.form{	import com.arn.iterators.IIterator;	import flash.events.*;	import flash.net.*;	/**	 * Class that represents a form with user inputs.	 * 	 * @example	 * <pre>	 * var nameInput:FormInput = new FormInput("name", InputType.ALPHA, "TestName", "Please enter valid name", false);	 * var emailInput:FormInput = new FormInput("email", InputType.EMAIL, "testing@derrick.com", "Please enter valid email", false);	 * 	 * var form:Form = new Form( "testScript.php" );	 * var form.addInput( nameInput );	 * var form.addInput( emailInput );	 *	 * form.submit();	 * </pre>	 * 	 * @author	Derrick Williams, Arnold Worldwide	 * @author	http://www.arnoldworldwide.com	 * @version 1.0, ActionScript 3.0	 */	public class Form extends EventDispatcher	{		// PRIVATE PROPERTIES -----------------------------				private var _inputs			: FormInputCollection;		// form inputs used in this form		private var _inputsIterator : IIterator;				// 		private var _scriptURL		: String;					// url of the server-side script to send variable to		private var _method			: String;					// URLRequestMethod		private var _errors			: Array;					// errors collected from invalid form inputs		private var _variables		: URLVariables;				// name/value pairs derived from form inputs		private var _response		: * ;						// response from the server-side script		private var _dataFormat		: String;					// data format of the response text						// EVENT CONSTANTS --------------------------------				public static const SUBMIT		: String = "submit";		public static const RECEIVED	: String = "received";		public static const VALID		: String = "valid";		public static const ERROR		: String = "error";						// CONSTRUCTOR ------------------------------------				/**		 * Creates a new instance of this form object.		 * 		 * @param	pScriptURL	URL of the server-side script the form data will be sent to		 * @param	pMethod		URLRequestMethod; URLRequestMethod.POST (default) or URLRequestMethod.GET		 */		public function Form ( pScriptURL:String = null, pMethod:String = URLRequestMethod.POST ) : void 		{			_inputs 		= new FormInputCollection();			_inputsIterator	= _inputs.iterator();			_scriptURL 		= pScriptURL;			_method 		= pMethod;			_errors 		= [];			_variables 		= new URLVariables();			_dataFormat 	= URLLoaderDataFormat.TEXT;		}				// PUBLIC METHODS ---------------------------------				/**		 * Adds an input to the form.		 * @param	input	The input to add.		 */		public function addInput( input : FormInput ) : void		{			_inputs.addElement( input );		}				/**		 * Sends this form's data to the server-side script once it's inputs		 * have been validated.		 */		public function submit () : void		{			dispatchEvent( new Event(Form.SUBMIT));						// if the form is valid, try to send it; otherwise, dispatch error event 			if (this.validate()) {								//send form data to script				var _loader	 : URLLoader	= new URLLoader() ;					var _request : URLRequest 	= new URLRequest();				_request.url 	= this.scriptURL;				_request.method	= this.method;				_request.data 	= getVariables();				_loader.dataFormat = this.dataFormat;				_loader.addEventListener(Event.COMPLETE, handleLoadComplete);								try				{					_loader.load(_request);				}				catch (error:Error)				{					trace("Unable to load URL");				}							} else {				dispatchEvent(new Event(Form.ERROR));								for (var i in _errors)				{					trace(_errors[i]);				}			}		}				// PRIVATE METHODS --------------------------------				/*		 * Validates each input and collects the error message of inputs		 * that don't pass validation.		 *		 * @return	true if all inputs are valid, false if they are not 		 */		private function validate() : Boolean		{			// clear/reset all errors			_errors = [];						// validate each input				while( _inputsIterator.hasNext() ){				var tInput : FormInput = FormInput( _inputsIterator.next() );								if ( tInput.validate() == false ) {					_errors.push(tInput.error);				}			}						// check if there are any errors			if (_errors.length > 0) {				return false;			} else {				return true;			}		}				/*		 * Takes the name and the value of each input and assigns it as a name value pair		 * to the _variables object.		 * 		 * @return	the URLVariables object with the name/value pairs		 */		private function getVariables() : URLVariables		{   			trace(">> gettign variables");			_inputsIterator.reset();			while( _inputsIterator.hasNext() ){				var tInput : FormInput = FormInput( _inputsIterator.next() );				trace( "test: " + tInput.name + " - " + tInput.value );				_variables[ tInput.name ] = tInput.value;			}						for (var i in _variables) {				trace(i + " = " + _variables[i]);			}//			_variables = new URLVariables("senderName=hello");//			trace(_variables.decode(_variables.toString()));			return _variables;		}		 		/*		 * Executes when the form variables are successfully submitted to the 		 * server-side script.		 * 		 * @param	e	Event object		 */		private function handleLoadComplete(e:Event):void		{			trace(e.target.data);			_response = e.target.data;			dispatchEvent( new Event(Form.RECEIVED));		}				// GETTERS/SETTERS --------------------------------				/**		 * Error messages collected from the invalid form inputs		 */		public function get errors () : Array		{			return _errors;		}				/**		 * URL of the server-side script the form data will be sent to		 */		public function get scriptURL() : String		{			return _scriptURL;		}				public function set scriptURL( pScriptURL:String ) : void 		{			_scriptURL = pScriptURL;		}				/**		 * URLRequestMethod; URLRequestMethod.POST or URLRequestMethod.GET		 */		public function get method() : String		{			return _method;		}				public function set method( pMethod:String ) : void 		{			_method = pMethod;		}				/**		 * Response from the server side script		 */		public function get response() : *		{			return _response;		}				/**		 * Data format of the response from the server-side script		 */		public function get dataFormat() : String		{			return _dataFormat;		}				public function set dataFormat( pDataFormat:String ) : void		{			_dataFormat = pDataFormat;		}		}}// TODO: Add in a way to check for duplaicate variables