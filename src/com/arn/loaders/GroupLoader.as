package com.arn.loaders{	import flash.display.Loader;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	/**	 * GroupLoader	 * Creates Loader object that you can use to load a group of files, 	 * such as SWF, JPEG, GIF, or PNG files. 	 * 	 * @usage	 * var loadGroup:GroupLoader = new GroupLoader(["image1.jpg","image2.jpg"]);	 * loadGroup.addEventListener( Event.COMPLETE, onComplete);	 * 	 * function onComplete( evt:Event ) : void	 * {	 * 		for(var i in e.target.content){	 * 			var image:Bitmap = e.target.content[i] as Bitmap;	 * 			image.x = (i * image.width);	 * 			addChild(image);	 * 		}	 * }	 * 	 * @author 	Derrick Williams	 * @version	1.0, ActionScript 3.0	 */	public class GroupLoader extends EventDispatcher	{		// CONSTANTS --------------------------------------				public static const ERROR	: String = "error";				// PRIVATE PROPERTIES -----------------------------				private var _numLoaders		: uint;		// Number of loaders in this group		private var _numComplete	: uint;		// Number of loaders that have loaded completely		private var _loaders 		: Array;	// References to the loader objects		private var	_content		: Array;	// The content of the completed loaders		private var _files			: Array;	// The external paths of the content to load				// CONSTRUCTOR ------------------------------------				public function GroupLoader( files:Array ) : void		{			_numComplete		= 0;			_loaders 			= [];			_files				= files;			_numLoaders			= _files.length;			_content			= [];		}				// PUBLIC METHODS ---------------------------------				/**		 * Cancels a load() method operation that is currently in progress for the Loader instances. 		 */		public function close () : void		{			for( var i in _loaders ) {				_loaders[ i ].close();			}		}			/**		 * Loads a SWF, JPEG, progressive JPEG, unanimated GIF, or PNG file into an object 		 * that is a child of each Loader object.		 */		public function load () : void		{							for( var i in _files ) {				var loader:Loader = new Loader();									loader.load( new URLRequest( _files[i]) );				loader.contentLoaderInfo.addEventListener( ProgressEvent.PROGRESS, onProgress );				loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, onLoadError );				loader.contentLoaderInfo.addEventListener( Event.COMPLETE, onLoaderComplete );								_loaders.push( loader );			}		}				/**		 * Removes the child of each Loader object that was loaded by using the load() method. 		 * The property of the associated LoaderInfo object is reset to null. 		 * Note: The child is not necessarily destroyed because other objects might have references to it; 		 * however, it is no longer a child of the Loader object.		 */		public function unload () : void		{			for( var i in _loaders ) {				_loaders[i].unload();			}		}				// PRIVATE METHODS --------------------------------				/**		 * Retrieves the loaded child of each Loader object and stores them in an array.		 */		private function getContentFromLoaders() : void		{			for ( var i in _loaders ) {				_content[i] = _loaders[i].content;			}		}				/**		 * Removes the listeners from all of the Loader objects, then closes the connection		 * created by the load() method operation and unloads the child content for each Loader object. 		 */		private function destroy() : void		{			for (var i in _loaders) {				_loaders[i].contentLoaderInfo.removeEventListener( ProgressEvent.PROGRESS, onProgress );				_loaders[i].contentLoaderInfo.removeEventListener( IOErrorEvent.IO_ERROR, onLoadError );				_loaders[i].contentLoaderInfo.removeEventListener( Event.COMPLETE, onLoaderComplete );			}						this.close();			this.unload();		}				// EVENT LISTENERS --------------------------------				/**		 * Handles the "complete" event for a Loader object.		 */		private function onLoaderComplete( e:Event ) : void		{						// count the number of loaders that have loaded			_numComplete++; 						// Get loaders' content and let listeners know that loading is complete			if ( _numComplete == _numLoaders ) {				getContentFromLoaders();								dispatchEvent( new Event( Event.COMPLETE ));			}		}				/**		 * Handles the "io_error" event for a Loader object.		 */		private function onLoadError( e:Event ) : void		{			destroy();			dispatchEvent( new Event( GroupLoader.ERROR ) );		}				/**		 * Handles the "progress" event for a Loader object.		 */		private function onProgress( e:Event ) : void		{			dispatchEvent( new ProgressEvent( ProgressEvent.PROGRESS ) ); 		}				// GETTERS/SETTERS --------------------------------				/**		 * Gets an array of the loaded content derived from the Loader objects used in this Loader Group.		 */		public function get content() : Array		{			return _content;		}				/**		 * Gets the array of Loader objects used in this Loader Group.		 */		public function get loaders() : Array		{			return _loaders;		}				/**		 * Gets the total bytes loaded for all the Loader objects in this Loader Group.		 */		public function get bytesLoaded () : Number		{				var pBytesLoaded : Number = 0;						for ( var i in _loaders ) {				pBytesLoaded += _loaders[ i ].contentLoaderInfo.bytesLoaded;				} 						return pBytesLoaded;		}				/**		 * Gets the total bytes for all the Loader objects in this Loader Group.		 */		public function get bytesTotal () : Number		{				var pBytesTotal : Number = 0;						for ( var i:int = 0; i < _loaders.length; i++ ) {							pBytesTotal += _loaders[ i ].contentLoaderInfo.bytesTotal;			}						return pBytesTotal;		}				/**		 * Gets the percent loaded for all the Loader objects in this Loader Group.		 */		public function get percentLoaded () : Number		{			var percentLoaded =  Math.round(bytesLoaded / bytesTotal * 100);			percentLoaded = (isNaN(percentLoaded)) ? 0 : percentLoaded;						return percentLoaded;		}	}}