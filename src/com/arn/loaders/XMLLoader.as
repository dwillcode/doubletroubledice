package com.arn.loaders{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;		/**	 * XMLLoader 	 * A class that loads external xml files without the hastle of	 * creating a URL loader and URL Request.	 * 	 * @usage	 * XMLLoader.load("XMLLoaderTest.xml", onXmlLoad);	 * 	 * function onXMLLoad( success:Boolean, xml:XML ) : void	 * {	 * 	if(success){	 * 		trace(xml);	 * 	}	 * }	 *	 * - or -	 *	 * var xmlLoader : XMLLoader = new XMLLoader( "XMLLoaderTest.xml" );	 * xmlLoader.addEventListener( Event.COMPLETE, onXMLLoad );	 * 	 * function onXMLLoad( e:Event ) : void	 * {	 * 	trace(e.target.xml);	 * 	xmlLoader.removeEventListener( Event.COMPELTE, onXMLLoad );	 * }	 * 	 * @author 	Derrick Williams, Arnold Worldwide	 * @author	http://arnoldworldwide.com/	 * @version 1.0, ActionScript 3.0	 */	public class XMLLoader extends EventDispatcher	{		// PRIVATE PROPERTIES -----------------------------				private var _onComplete_func	: Function;		private var _xml				: XML;		private var _bytesLoaded		: Number;		private var _bytesTotal			: Number;		private var _percentLoaded		: Number;				// CONSTRUCTOR ------------------------------------				public function XMLLoader(url_str:String, onComplete_func:Function = null) 		{			_bytesLoaded 	= 0;			_bytesTotal 	= 0;			_percentLoaded 	= 0;						var request	: URLRequest	= new URLRequest(url_str);			var loader	: URLLoader		= new URLLoader(request);						_onComplete_func 	= onComplete_func;						loader.addEventListener( Event.COMPLETE, onXmlComplete );			loader.addEventListener( ProgressEvent.PROGRESS, onProgress );					}				// PUBLIC METHODS ---------------------------------				public static function load( url_str:String, onComplete_func:Function = null) : void		{			var xmlLoader:XMLLoader = new XMLLoader( url_str, onComplete_func);		}				// EVENT LISTENERS --------------------------------				private function onXmlComplete( e:Event ):void 		{				this.xml = new XML( e.target.data );						if(_onComplete_func != null)				_onComplete_func( true, _xml );						dispatchEvent( new Event( Event.COMPLETE ) );						e.target.removeEventListener( Event.COMPLETE, onXmlComplete );			e.target.removeEventListener( ProgressEvent.PROGRESS, onProgress );		}				private function onProgress( e:ProgressEvent ) : void 		{			this.bytesLoaded 	= e.target.bytesLoaded;			this.bytesTotal  	= e.target.bytesTotal;			this.percentLoaded 	= Math.round( this.bytesLoaded / this.bytesTotal * 100 );						dispatchEvent( new ProgressEvent( ProgressEvent.PROGRESS ) );		}					// GETTERS/SETTERS --------------------------------				public function get xml() : XML		{			return _xml;		}				public function set xml( xml:XML ) : void		{			_xml = xml;		}						public function get bytesLoaded() : Number		{			return _bytesLoaded;		}				public function set bytesLoaded( bytesLoaded:Number ) : void		{			_bytesLoaded = bytesLoaded;		}						public function get bytesTotal() : Number		{			return _bytesTotal;		}				public function set bytesTotal( bytesTotal:Number ) : void		{			_bytesTotal = bytesTotal;		}						public function get percentLoaded() : Number		{			return _percentLoaded;		}				public function set percentLoaded( percentLoaded:Number ) : void		{			_percentLoaded = percentLoaded;		}	}}