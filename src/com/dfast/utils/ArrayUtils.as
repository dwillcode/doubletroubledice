package com.dfast.utils{	/**	 * Contains static methods used to manipulate Arrays.	 * 	 * @author	Derrick Wiliams	 */	public class ArrayUtils 	{		// ===============================================================		//		//	Static Methods		//		// ===============================================================				// ---------------------------------------------------------------		//	arrayContainsValue		// ---------------------------------------------------------------				/**		 * Check if the given array contains the given value.		 * @param	arr		The array to check for the value.		 * @param	value	The value to check for.			 * @return 	True if the array contains the value, false if otherwise.		 */		public static function arrayContainsValue( arr:Array, value:* ) : Boolean		{			return ( arr.indexOf( value ) != -1 );		}				// ---------------------------------------------------------------		//	checkEquality		// ---------------------------------------------------------------				/**		 * Determines if the two arrays are eqaul.		 * @param	arrayA	The first array to check.		 * @param	arrayB	the second array to check.		 * @param	sortBeforeChecking	Determines if the array should be sorted. 		 * 								If true, the order of the arrays doesn't matter.		 * @return 	True if the arrays are equal. False if otherwise.		 */		public static function checkEquality( arrayA:Array, arrayB:Array, sortBeforeChecking:Boolean = true ) : Boolean 		{					// If the two arrays don't have the same number of elements,			// they obviously are not equivalent.			if( arrayA.length != arrayB.length ) return false;					// Create a copy of each so that anything done to the copies 			// doesn't affect the originals.			var arrayACopy:Array = arrayA.concat(  );			var arrayBCopy:Array = arrayB.concat(  );					// If the order of the elements of the two arrays doesn't 			// matter, sort the two copies so the order of the copies 			// matches when comparing.			if( sortBeforeChecking ) {				arrayACopy.sort(  );				arrayBCopy.sort(  );			}					// Loop through each element of the arrays, and compare them. 			// If they don't match, delete the copies and return false.			for(var i:int = 0; i < arrayACopy.length; i++) {				if( arrayACopy[ i ] != arrayBCopy[ i ] ) return false;			}					// Otherwise the arrays are equivalent. 			// So delete the copies and return true.			return true;		}						// ---------------------------------------------------------------		//	createUniqueCopy		// ---------------------------------------------------------------				/**		 * Create a new array that only contains unique instances of objects in the specified array.		 * Basically, this can be used to remove duplication object instances from an array		 * 		 * @param 	arr		The array which contains the values that will be 		 * 					used to create the new array that contains no duplicate values.		 * @return 	A new array which only contains unique items from the specified array.		 */			public static function createUniqueCopy( arr:Array ) : Array		{			var newArray : Array = new Array();						var len : Number = arr.length;			var item : Object;						for (var i:uint = 0; i < len; ++i)			{				item = arr[ i ];								if( ArrayUtils.arrayContainsValue( newArray, item ) ) continue;								newArray.push( item );			}						return newArray;		}				// ---------------------------------------------------------------		//	getRandomIndex		// ---------------------------------------------------------------				/**		 * Returns a random index based on the length of the given array.		 * @param	arr		The array to get the random index from.		 * @return	An interger representing a random index from the array.		 */		public static function getRandomIndex( arr : Array ) : int		{					return Math.round( Math.random() * ( arr.length-1 ) );		}				// ---------------------------------------------------------------		//	getRandomItem		// ---------------------------------------------------------------				/**		 * Returns a random element from the given array.		 * @param	arr	The source array.		 * @return 	The random element retrfrom the array.		 */		public static function getRandomItem( arr : Array ) : Object		{			return arr[ getRandomIndex( arr ) ];		}				// ---------------------------------------------------------------		//	randomize		// ---------------------------------------------------------------				/**		 * Randomly switches the index of elements within an array.		 * @param	arr		The source array to randomize.		 * @return 	An array with elements of the original array randomized.		 */		public static function randomize( arr : Array ) : Array		{			var new_arr : Array = [];						while ( arr.length > 0 ) {				new_arr.push( arr.splice( getRandomIndex( arr ), 1 ) );			}						return new_arr;		}				// ---------------------------------------------------------------		//	removeValueFromArray		// ---------------------------------------------------------------				/**		 * Remove all instances of the specified value from the array.		 * @param	arr 	The array from which the value will be removed		 * @param	value 	The object that will be removed from the array.		 */				public static function removeValueFromArray( arr:Array, value:Object ) : void		{			var len:uint = arr.length;						for(var i:Number = len; i > -1; i--)			{				if(arr[i] === value)				{					arr.splice(i, 1);				}			}							}					// ---------------------------------------------------------------		//	swapElements		// ---------------------------------------------------------------				/**		 * Swap the elements given elements in the array.		 * @param	arr		The source array.		 * @param	pos1	The index of the first item to be swapped.		 * @param	pos2	The index of the second item to be swapped.		 * @return	The array after the items have been swapped.		 */		public static function swapElements( arr:Array, pos1:Number, pos2:Number ) : Array		{			var tmp1 : Object = arr[ pos1 ];			var tmp2 : Object = arr[ pos2 ];						arr[ pos1 ] = tmp2;			arr[ pos2 ] = tmp1;						return arr;		}		} }