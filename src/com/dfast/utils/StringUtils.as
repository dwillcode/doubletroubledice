package com.dfast.utils {	/**	 * Contains static methods for manipulating Strings.	 * 	 * @author 	Derrick Williams	 * @version 1.0, ActionScript 3.0	 */  	public class StringUtils 	{		// ---------------------------------------------------------------		//	addLeadingZero		// ---------------------------------------------------------------				/**		 * Formats a number to include a leading zero if it is a single digit		 * between -1 and 10. 			 * @param 	number	The number that will be formatted.		 * @return	A string with single digits between -1 and 10 padded with a 		 *			leading zero.		 */				public static function addLeadingZero( number:Number ) : String		{			var out:String = String( number );						if( number < 10 && number > -1) out = "0" + out;						return out;		}				// ---------------------------------------------------------------		//	beginsWith		// ---------------------------------------------------------------		/**		 * Determines whether the specified string begins with the spcified prefix.		 * @param 	input	The string that the prefix will be checked against.		 * @param 	prefix	The prefix that will be tested against the string.		 * @return 	True if the string starts with the prefix, false if it does not.		 */		public static function beginsWith( input:String, prefix:String ):Boolean		{						return ( prefix == input.substring( 0, prefix.length ) );		}					// ---------------------------------------------------------------		//	checkPunc		// ---------------------------------------------------------------				/**		 * Checks for punctuation at the end of a string.		 * @param	value	Original string.		 * @param	punc	Punctuation to use if none is present.		 * @return	The original string if punctuation is present.		 * 			Otherwise, it returns the original string with		 * 			the designated punctuation.		 */		public static function checkPunc( value:String, punctuation:String = null ) : String		{			//if no punctuation is set, the default is a period			punctuation = ( punctuation == null ) ? "." : punctuation;						var str:String = StringUtils.trim( value );			var pattern:RegExp = /\!|\.|\?|\"/;			var result:Boolean = pattern.test(str.charAt(str.length - 1));			str = ( result ) ? str : ( str + punctuation );						return str;		}				// ---------------------------------------------------------------		//	convertSymbols		// ---------------------------------------------------------------				/**		 * Converts symbol characters to unicode.		 * @param	str		The string to be parsed.		 * @return	A string with unicode for symbol characters.		 */		public static function convertSymbols ( str:String ) : String		{				str = replace( str, "©", "\u00A9");			str = replace( str, "&copy;", "\u00A9");			str = replace( str, "—", "\u2014");			str = replace( str, "®", "\u00AE");			str = replace( str, "&reg;", "\u00AE");					str = replace( str, "™", "\u2122");			str = replace( str, "&trade;", "\u2122");			str = replace( str, "€", "\u20AC");						return str;		}				// ---------------------------------------------------------------		//	endsWith		// ---------------------------------------------------------------				/**		 * Determines whether the specified string ends with the spcified suffix.		 * @param 	input 	The string that the suffic will be checked against.		 * @param 	prefix 	The suffic that will be tested against the string.		 * @return 	True if the string ends with the suffix, false if it does not.		 */		public static function endsWith( input:String, suffix:String ) : Boolean		{			return ( suffix == input.substring( input.length - suffix.length ) );		}					// ---------------------------------------------------------------		//	remove		// ---------------------------------------------------------------				/**		 * Removes all instances of the remove string in the input string.		 * @param 	input 	The string that will be checked for instances of remove string.		 * @param 	remove 	The string that will be removed from the input string.		 * @return 	A String with the remove string removed.		 */		public static function remove( input:String, remove:String ):String		{			return StringUtils.replace( input, remove, "" );		}		// ---------------------------------------------------------------		//	replace		// ---------------------------------------------------------------				/**		 * Replaces all instances of the replace string in the input string		 * with the replaceWith string.		 * @param 	input 		The string that instances of replace string will be 		 * 						replaces with removeWith string.		 * @param 	replace 	The string that will be replaced by instances of the replaceWith string.		 * @param	replaceWith	The string that will replace instances of replace string.		 * @return 	A new String with the replace string replaced with the replaceWith string.		 */		public static function replace( input:String, replace:String, replaceWith:String ):String		{			// change to StringBuilder			var string	: String 	= new String();			var found	: Boolean 	= false;			var stringLength			: Number	= input.length;			var replacementStringLength	: Number 	= replace.length;			for (var i:Number = 0; i < stringLength; i++)			{				if( input.charAt( i ) == replace.charAt( 0 ) )				{   					found = true;					for( var j:Number = 0; j < replacementStringLength; j++ )					{						if( !( input.charAt( i + j ) == replace.charAt( j ) ) )						{							found = false;							break;						}					}					if(found)					{						string += replaceWith;						i = i + ( replacementStringLength - 1 );						continue;					}				}								string += input.charAt( i );			}						return string;		}				// ---------------------------------------------------------------		//	stringsAreEqual		// ---------------------------------------------------------------				/**		 * Does a case insensitive compare of two strings and returns true if they are equal.		 * @param 	string1	The first string to compare.		 * @param 	string2	The second string to compare.		 * @return	A boolean value indicating whether the strings' values are 		 *			equal in a case sensitive compare.			 */				public static function stringsAreEqual( string1:String, string2:String, caseSensitive:Boolean ) : Boolean		{			if( caseSensitive ) return ( string1 == string2 );			else return ( string1.toUpperCase() == string2.toUpperCase() );		}				// ---------------------------------------------------------------		//	toInitialCap		// ---------------------------------------------------------------				/**		 * Changes the first letter in a string to uppercase and the remainder		 * of the string to lowercase.		 * @param 	original	The string that will be formatted.		 * @return	A string with initial case format		 */		public static function toInitialCap( original:String ) : String 		{		 	return original.charAt( 0 ).toUpperCase(  ) + original.substr( 1 ).toLowerCase(  );		}		// ---------------------------------------------------------------		//	toTitleCase		// ---------------------------------------------------------------				/**		 * Changes the first letter of each word in a string to uppercase and the remainder		 * of the word to lowercase. 			 * @param	original	The string that will be formatted		 * @return	A string with words that are in initial case format		 */			public static function toTitleCase( original:String ):String 		{			var words:Array = original.split( " " );						for (var i:int = 0; i < words.length; i++) {				words[i] = toInitialCap( words[i] );			}						return ( words.join( " " ) );		}				// ---------------------------------------------------------------		//	trim		// ---------------------------------------------------------------				/**		 * Removes whitespace from the front and the end of the specified string.		 * @param	input	The String whose beginning and ending whitespace will		 *					will be removed.		 * @return 	A String with whitespace removed from the begining and end			 */				public static function trim( input:String ):String		{			return StringUtils.trimLeft( StringUtils.trimRight( input ) );		}		// ---------------------------------------------------------------		//	trimLeft		// ---------------------------------------------------------------				/**		 * Removes whitespace from the front of the specified string.		 * @param	input	The String whose beginning whitespace will will be removed.		 * @return 	A String with whitespace removed from the begining			 */		public static function trimLeft( input:String ) : String		{			var size : Number = input.length;			for( var i:Number = 0; i < size; i++)			{				if( input.charCodeAt( i ) > 32) return input.substring(i);			}						return "";		}		// ---------------------------------------------------------------		//	trimRight		// ---------------------------------------------------------------				/**		 * Removes whitespace from the end of the specified string.		 * @param	input	The String whose ending whitespace will will be removed.		 * @return 	A String with whitespace removed from the end.		 */		public static function trimRight( input:String ) : String		{			var size:Number = input.length;			for( var i:Number = size; i > 0; i-- )			{				if( input.charCodeAt( i - 1 ) > 32) return input.substring( 0, i );			}			return "";		}	}}