package com.dfast.controls{	import com.dfast.core.UIObject;	import com.dfast.events.ScrollBarEvent;		import com.greensock.TweenLite;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;			/**	 * @author 	Derrick Williams	 */	public class ScrollBar extends UIObject	{				public static const VERTICAL : String = "vertical";		public static const HORIZONTAL : String = "horizontal";		private static const DEFAULT_TWEEN_DURATION : Number = .5;				private var _orientation : String;		private var _minimumPosition : Number;		private var _maximumPosition : Number;		private var _positionOffset: Number;		private var _axis : String;		private var _mouseProperty : String;		private var _thumb : Sprite;		private var _track : Sprite;				public static var tweenDuration : Number = DEFAULT_TWEEN_DURATION;				public function get orientation():String { return _orientation; }		public function set orientation(value:String):void 		{			_orientation = value;		}				public function get scrollPosition() : Number		{			return _thumb[_axis] / _maximumPosition;		}				public function set thumb(value:Sprite):void 		{			_thumb = value;		}				public function set track(value:Sprite):void 		{			_track = value;		}				public function ScrollBar(thumb:Sprite=null, track:Sprite=null, orientation:String = "horizontal")		{			_thumb = thumb;			_track = track;						_orientation = orientation;			_axis = (_orientation == VERTICAL) ? "y" : "x";			_mouseProperty = (_orientation == VERTICAL) ? "mouseY" : "mouseX";						super();		}				public function init() : void		{				if (_thumb && _track) {				addChild(_track);				addChild(_thumb);								_thumb.buttonMode = true;								var trackLength:Number = (_orientation == VERTICAL) ? _track.height : _track.width;				var thumbLength:Number = (_orientation == VERTICAL) ? _thumb.height : _thumb.width;								_minimumPosition = _track[_axis];				_maximumPosition = _track[_axis] + trackLength - thumbLength;							addEventListeners();							moveThumb( 0 );			}		}				private function addEventListeners() : void		{			addEventListener( MouseEvent.MOUSE_WHEEL, onMouseMove );			_thumb.addEventListener( MouseEvent.MOUSE_DOWN, onThumbDown );			stage.addEventListener( MouseEvent.MOUSE_UP, onThumbUp );		}				public function moveThumb(value:Number, animate:Boolean = false) : void		{			if(!animate) {				_thumb[_axis] = value;								checkThumbBounds();				update();			} else {				var tweenProps:Object = { };				tweenProps[_axis] = value;				tweenProps.onUpdate = update;								TweenLite.to(_thumb, tweenDuration, tweenProps );			}		}			private function checkThumbBounds() : void		{			if (_thumb[_axis] <= _minimumPosition)				_thumb[_axis] = _minimumPosition;			if (_thumb[_axis] >= _maximumPosition)				_thumb[_axis] = _maximumPosition;		}				public function setScrollPosition( value: Number, animate:Boolean = false ) : void		{			moveThumb( ( _maximumPosition - _minimumPosition ) * value + _minimumPosition, animate );				}			 		override public function destroy() : void		{			removeEventListener( MouseEvent.MOUSE_WHEEL, onMouseMove );			_thumb.removeEventListener( MouseEvent.MOUSE_DOWN, onThumbDown );			stage.removeEventListener( MouseEvent.MOUSE_UP, onThumbUp );						moveThumb( 0 );		}				private function update() : void		{			//dispatchEvent( new ScrollBarEvent(thumb[_axis] / _maximumPosition) );			dispatchEvent(new Event(Event.CHANGE));		}				override protected function onAddedToStage(event:Event) : void		{			init();			super.onAddedToStage(event);		}				private function onThumbDown( event:MouseEvent ) : void		{			_positionOffset = _thumb[_axis] - this[_mouseProperty];			stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);		}						private function onThumbUp( event:MouseEvent ) : void		{			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);		}				private function onMouseMove( event:MouseEvent ) : void		{			var newPosition : Number = ( event.type == MouseEvent.MOUSE_WHEEL ) ? (_thumb[_axis] - event.delta) : (_positionOffset + this[_mouseProperty]);						moveThumb( newPosition );						event.updateAfterEvent();		}			}}