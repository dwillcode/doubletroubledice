package com.dfast.controls {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;		/**	 * ...	 * @author Derrick Williams	 */	public class RadioButtonGroup extends EventDispatcher	{		// ===============================================================		//		//	Constructor		//		// ===============================================================				public function RadioButtonGroup() 		{			_radioButtons = [];						_enabled = true;		}				// ===============================================================		//			//	Local Variables		//		// ===============================================================				private var _seletectedRadioButton : RadioButton;		private var _selectedValue : * ;		private var _radioButtons : Array;		private var _name : String;		private var _enabled:Boolean;				// ===============================================================		//		//	Instance Variables		//		// ===============================================================				public function get seletectedRadioButton():RadioButton { return _seletectedRadioButton; }				public function get selectedValue():* { return _selectedValue; }		public function set selectedValue(value:*):void 		{			_selectedValue = value;		}				public function get name():String { return _name; }		public function set name(value:String):void 		{			_name = value;		}				public function get enabled():Boolean { return _enabled; }		public function set enabled(value:Boolean):void 		{			_enabled = value;						var radioButton:RadioButton;						for each(radioButton in _radioButtons) {				radioButton.enabled = value;			}		}					// ===============================================================		//		//	Instance Methods		//		// ===============================================================				public function add(radioButton:RadioButton):void		{			radioButton.addEventListener(MouseEvent.CLICK, onRadioButtonSelected);			_radioButtons.push(radioButton);		}						public function remove(radioButton:RadioButton):void		{			var radioButtonIndex:int = _radioButtons.indexOf(radioButton);						if (radioButtonIndex < -1) {				_radioButtons.splice(radioButtonIndex, 1);			}					}				// ===============================================================		//		//	Event Listeners		//		// ===============================================================				private function onRadioButtonSelected(event:MouseEvent):void 		{			var radioButton:RadioButton = event.currentTarget as RadioButton;			var numRadioButtons:int = _radioButtons.length;			var buttonIndex:int = _radioButtons.indexOf(radioButton);						_selectedValue = radioButton.value;			_seletectedRadioButton = radioButton;						dispatchEvent(new Event(Event.CHANGE));						if (buttonIndex > -1) {				for (var i:int = 0; i < numRadioButtons; i++) {					if (i != buttonIndex) _radioButtons[i].selected = false;				}			}		}	}	}