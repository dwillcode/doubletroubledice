package com.doubletroubledice.ui {	import com.doubletroubledice.core.Model;	import com.doubletroubledice.events.GameEvent;	import com.dfast.controls.Button;	import com.dfast.controls.LabelButton;	import com.dfast.controls.RadioButton;	import com.dfast.controls.RadioButtonGroup;	import com.dfast.managers.SoundManager;	import com.dfast.sounds.ChannelType;	import com.dfast.styles.StyleFormat;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;			import com.greensock.TweenMax;	import com.greensock.OverwriteManager;	import com.greensock.easing.Bounce;	import com.greensock.easing.Back;		import com.arn.time.Delay;		public class GameStartScreen extends Sprite	{				public var play_mc:MovieClip;		public var rules_mc:MovieClip;		public var helpScreen_mc:MovieClip;		public var playOptions_mc:MovieClip;		private var _musicBtn:Button;		private var _soundBtn:Button;		private var _oodlesOption1:RadioButton;		private var _oodlesOption2:RadioButton;		private var _oodlesOption3:RadioButton;		private var _oodlesRadioGroup:RadioButtonGroup;				private var _model:Model;		public function set model(value:Model):void 		{			_model = value;			_model.addEventListener( Event.INIT, createOptionButtons );			_model.addEventListener( Event.CHANGE, update );						play_mc.addEventListener( MouseEvent.CLICK, options );			rules_mc.addEventListener( MouseEvent.CLICK, helpScreenOpen );		}				public function GameStartScreen() 		{			//startGame.buttonMode = true;			rules_mc.buttonMode = true;			play_mc.buttonMode = true;			helpScreen_mc.visible = false;			playOptions_mc.visible = false;						var musicBtnUpState:Sprite = new MusicUnmutedState();			var musicBtnDisabledState:Sprite = new MusicMutedState();			_musicBtn = new Button(musicBtnUpState, null, null, musicBtnDisabledState);			_musicBtn.addEventListener( MouseEvent.CLICK, toggleSound);			addChild(_musicBtn);						var soundBtnUpState:Sprite = new SoundUnmutedState();			var soundBtnDisabledState:Sprite = new SoundMutedState();			_soundBtn = new Button(soundBtnUpState, null, null, soundBtnDisabledState);			_soundBtn.addEventListener( MouseEvent.CLICK, toggleSound);			addChild(_soundBtn);						var buttonStyle:StyleFormat = new StyleFormat();			buttonStyle.setProperty("textAlign", "center");			buttonStyle.setProperty("autoSize", "left");						_soundBtn.styleFormat = buttonStyle;			_soundBtn.move(244, 383);			_soundBtn.scale = .57;			_soundBtn.render();						_musicBtn.styleFormat = buttonStyle;			_musicBtn.move(356, 383);			_musicBtn.scale = .57;			_musicBtn.render();						addChild(play_mc);			addChild(rules_mc);			addChild(helpScreen_mc);			addChild(playOptions_mc);		}				private function createOptionButtons(event:Event = null) : void		{			if(!_model.practiceMode){				_oodlesRadioGroup = new RadioButtonGroup();								_oodlesOption1 = createRadioButton(0);				_oodlesOption1.selected = true;				_oodlesOption1.move( -84, 17);				playOptions_mc.addChild(_oodlesOption1);								_model.userOodlesSpent = _oodlesOption1.value.oodles;				_model.numRolls = _oodlesOption1.value.rolls;				Model.MAX_ROLLS = _oodlesOption1.value.rolls;								_oodlesOption2 = createRadioButton(1);				_oodlesOption2.move( -84, 48);				if (_model.oodlesOption2Available) playOptions_mc.addChild(_oodlesOption2);												_oodlesOption3 = createRadioButton(2);				_oodlesOption3.move( -84, 79);				if (_model.oodlesOption3Available) playOptions_mc.addChild(_oodlesOption3);								_oodlesRadioGroup.add(_oodlesOption1);				_oodlesRadioGroup.add(_oodlesOption2);				_oodlesRadioGroup.add(_oodlesOption3);								_oodlesRadioGroup.addEventListener( Event.CHANGE, onRadioGroupChange );			}					}				private function createRadioButton(index:int): RadioButton		{			var rolls:int = _model.xml.oodles.option[index].@rolls;			var oodles:int = _model.xml.oodles.option[index].@oodles;						var rbUpState:OodlesOptionRadioUpState = new OodlesOptionRadioUpState();			rbUpState.numRolls.text = rolls + " rolls for";			rbUpState.numOodles.text = oodles + " oodles";						var rbSelectedState:OodlesOptionRadioSelectedState = new OodlesOptionRadioSelectedState();			rbSelectedState.numRolls.text = rolls + " rolls for";			rbSelectedState.numOodles.text = oodles + " oodles";						return new RadioButton({rolls: rolls, oodles: oodles}, "", rbUpState, rbSelectedState);		}				function onRadioGroupChange(event:Event) : void		{			trace("Selected value: " + event.target.selectedValue);			_model.userOodlesSpent = event.target.selectedValue.oodles;			_model.numRolls = event.target.selectedValue.rolls;			Model.MAX_ROLLS = event.target.selectedValue.rolls;					}				private function startGame(event:MouseEvent = null):void 		{			trace("game started");			dispatchEvent( new GameEvent(GameEvent.START));			_model.update();		}						private function options(event:MouseEvent):void 		{			if(!_model.practiceMode) {				playOptions_mc.visible = true;				playOptions_mc.alpha = 0;				playOptions_mc.closeBtn.buttonMode = true;				playOptions_mc.startGame.buttonMode = true;				playOptions_mc.closeBtn.addEventListener( MouseEvent.CLICK, closePlayOptions );				playOptions_mc.startGame.addEventListener( MouseEvent.CLICK, startGame );				TweenMax.to( playOptions_mc, .5, { alpha: 1 } );			} else {				startGame();			}		}						public function closePlayOptions(event:MouseEvent):void  		{			TweenMax.to( playOptions_mc, .5, { alpha: 0, onComplete: disableVisible } );			playOptions_mc.startGame.removeEventListener( MouseEvent.CLICK, startGame );			playOptions_mc.closeBtn.removeEventListener( MouseEvent.CLICK, closePlayOptions );			playOptions_mc.closeBtn.buttonMode = false;			playOptions_mc.startGame.buttonMode = false;		}				public function helpScreenOpen(event:MouseEvent):void  		{			helpScreen_mc.visible = true;			helpScreen_mc.alpha = 0;			TweenMax.to( helpScreen_mc, .5, { alpha: 1 } );			helpScreen_mc.closeBtn.addEventListener( MouseEvent.CLICK, helpScreenClose );			helpScreen_mc.closeBtn.buttonMode = true;		}				public function helpScreenClose(event:MouseEvent):void  		{			TweenMax.to( helpScreen_mc, .5, { alpha: 0, onComplete: disableVisible } );			helpScreen_mc.closeBtn.removeEventListener( MouseEvent.CLICK, helpScreenClose );			helpScreen_mc.closeBtn.buttonMode = false;		}				public function disableVisible():void  		{			helpScreen_mc.visible = false;			playOptions_mc.visible = false;		}						private function toggleSound(event:MouseEvent) : void		{			switch(event.target.name)			{				case _soundBtn.name:					_soundBtn.selected = !_soundBtn.selected;										if (_soundBtn.selected){						SoundManager.getInstance().muteChannel(ChannelType.FX);						SoundManager.getInstance().muteChannel(ChannelType.OTHER);					}					else{						SoundManager.getInstance().unmuteChannel(ChannelType.FX);						SoundManager.getInstance().unmuteChannel(ChannelType.OTHER);					}										break;									case _musicBtn.name:					_musicBtn.selected = !_musicBtn.selected;										if (_musicBtn.selected)						SoundManager.getInstance().muteChannel(ChannelType.MUSIC);					else						SoundManager.getInstance().unmuteChannel(ChannelType.MUSIC);					break;			}											//trace("Sound Muted: " + _soundBtn.selected);								}								public function update(event:Event = null):void 		{					}					}	}