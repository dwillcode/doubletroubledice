package com.doubletroubledice.ui {	import com.dfast.utils.MathUtils;		import com.doubletroubledice.valueObjects.DiceValues;	import com.doubletroubledice.ui.Dice;		import flash.display.BlendMode;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;			public class DiceBoard extends Sprite 	{		public static const DICE_ROLLED : String = "diceRolled";				private const BOUNCE:Number = -1.0;		private const FRICTION:Number = 0.9;		private const DICE_SCALE:Number = 0.7;		private const DICE_RADIUS:Number = 50;		private const BOARD_WIDTH:Number = 621;		private const BOARD_HEIGHT:Number = 253;		private const BOARD_PADDING:Number = 5;				private var _dice1:Dice;		private var _dice2:Dice;		private var _numDiceRolled:int;		private var _diceValues:DiceValues;		private var _background:Sprite;		private var _canResetDice:Boolean;				public function get diceValues():DiceValues { return _diceValues; }				public function DiceBoard():void 		{				_numDiceRolled = 0;			_canResetDice = false;			_diceValues = new DiceValues();			_background = new Sprite();			//_background.graphics.lineStyle(1);			_background.graphics.beginFill(0xc4c4c4, .4);			_background.graphics.drawRect(0, 0, BOARD_WIDTH, BOARD_HEIGHT);			_background.graphics.endFill();			addChild(_background);						_dice1 = new Dice();			_dice1.addEventListener(Dice.ROLL_COMPLETE, onDiceRollComplete);			addChild(_dice1);						_dice2 = new Dice();			_dice2.addEventListener(Dice.ROLL_COMPLETE, onDiceRollComplete);			addChild(_dice2);						addEventListener( Event.ADDED_TO_STAGE, render );					}				private function render( event:Event ) : void 		{			removeEventListener( Event.ADDED_TO_STAGE, render );						_dice1.radius = DICE_RADIUS;			_dice1.scaleX = _dice1.scaleY = DICE_SCALE;						_dice2.radius = DICE_RADIUS;			_dice2.scaleX = _dice2.scaleY = DICE_SCALE;						resetDicePosition();						trace(_dice1.width);		}				private function resetDicePosition():void		{			_dice1.x = BOARD_WIDTH / 2 - 2*DICE_RADIUS;			_dice2.x = BOARD_WIDTH / 2 + 2*DICE_RADIUS;			_dice1.y = _dice2.y = BOARD_HEIGHT/2;		}				public function rollDice() : void 		{			var velocity:Number = MathUtils.randRange(10, 50);			var rotationDuration:Number = 2;						if (_canResetDice) {				resetDicePosition();				_canResetDice = false;			}						_dice1.roll();			_dice2.roll();						_dice1.vx = (Math.random() > 0.5) ? velocity : -velocity;			_dice1.vy = -(MathUtils.randRange(10, 50));			_dice1.rotationDuration = rotationDuration;						_dice2.vx = (Math.random() > 0.5) ? velocity : -velocity;			_dice2.vy = -(MathUtils.randRange(10, 50));			_dice2.rotationDuration = rotationDuration;						addEventListener( Event.ENTER_FRAME, onEnterFrame );		}				private function onDiceRollComplete(event:Event) : void 		{			_numDiceRolled++;						if (_numDiceRolled == 2) {				_diceValues.dice1 = _dice1.score;				_diceValues.dice2 = _dice2.score;				_numDiceRolled = 0;																dispatchEvent(new Event(DICE_ROLLED));			}							removeEventListener( Event.ENTER_FRAME, onEnterFrame );		}				private function onEnterFrame(event:Event):void		{			moveDice(_dice1);			moveDice(_dice2);						checkCollision(_dice1, _dice2);						checkWalls(_dice1);			checkWalls(_dice2);		}				private function moveDice(dice:Dice):void		{			dice.vx *= FRICTION;			dice.vy *= FRICTION;			dice.x += dice.vx;			dice.y += dice.vy;			dice.rotation += dice.vx;								}				private function checkCollision(dice0:Dice, dice1:Dice):void		{			var dx:Number = dice1.x - dice0.x;			var dy:Number = dice1.y - dice0.y;			var dist:Number = Math.sqrt(dx*dx + dy*dy);			if(dist < dice0.radius + dice1.radius)			{				//trace("Distance: " + dist);								// calculate angle, sine, and cosine				var angle:Number = Math.atan2(dy, dx);				var sin:Number = Math.sin(angle);				var cos:Number = Math.cos(angle);				// rotate dice0's position				var x0:Number = 0;				var y0:Number = 0;				// rotate dice1's position				var x1:Number = dx * cos + dy * sin;				var y1:Number = dy * cos - dx * sin;				// rotate dice0's velocity				var vx0:Number = dice0.vx * cos + dice0.vy * sin;				var vy0:Number = dice0.vy * cos - dice0.vx * sin;				// rotate dice1's velocity				var vx1:Number = dice1.vx * cos + dice1.vy * sin;				var vy1:Number = dice1.vy * cos - dice1.vx * sin;				// collision reaction				var vxTotal:Number = vx0 - vx1;				vx0 = ((dice0.mass - dice1.mass) * vx0 + 2 * dice1.mass * vx1) / (dice0.mass + dice1.mass);				vx1 = vxTotal + vx0;				x0 += vx0;				x1 += vx1;				// rotate positions back				var x0Final:Number = x0 * cos - y0 * sin;				var y0Final:Number = y0 * cos + x0 * sin;				var x1Final:Number = x1 * cos - y1 * sin;				var y1Final:Number = y1 * cos + x1 * sin;				// adjust positions to actual screen positions				dice1.x = dice0.x + x1Final;				dice1.y = dice0.y + y1Final;				dice0.x = dice0.x + x0Final;				dice0.y = dice0.y + y0Final;				// rotate velocities back				dice0.vx = vx0 * cos - vy0 * sin;				dice0.vy = vy0 * cos + vx0 * sin;				dice1.vx = vx1 * cos - vy1 * sin;				dice1.vy = vy1 * cos + vx1 * sin;			}			if (dist < DICE_RADIUS) {				removeEventListener(Event.ENTER_FRAME, onEnterFrame);								dice0.x += 2*DICE_RADIUS;				dice1.x -= 2*DICE_RADIUS;			}		}				private function checkWalls(dice:Dice):void		{			var leftWall:Number = 0 + BOARD_PADDING;			var rightWall:Number = BOARD_WIDTH - BOARD_PADDING;			var topWall:Number = 0 + BOARD_PADDING;			var bottomWall:Number = BOARD_HEIGHT - BOARD_PADDING;						if(dice.x + dice.radius > rightWall)			{				dice.x = rightWall - dice.radius;				dice.vx *= BOUNCE;			}			else if(dice.x - dice.radius < leftWall)			{				dice.x = dice.radius;				dice.vx *= BOUNCE;			}			if(dice.y + dice.radius > bottomWall)			{				dice.y = bottomWall - dice.radius;				dice.vy *= BOUNCE;			}			else if(dice.y - dice.radius < topWall)			{				dice.y = dice.radius;				dice.vy *= BOUNCE;			}		}				public function playStarAnimation() : void		{			_dice1.playStarAnimation();			_dice2.playStarAnimation();		}			}}