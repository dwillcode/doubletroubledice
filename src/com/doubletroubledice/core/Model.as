package com.doubletroubledice.core {	import com.doubletroubledice.valueObjects.DiceValues;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.utils.setTimeout;	/**	 * The Model contains all the data necessary to play the game.	 * 	 * @author Derrick Williams	 * @author Robert Lavoie	 */	public class Model extends EventDispatcher 	{		public static var OODLES_USED_PER_ROLL:int 		= 5;		public static var OODLES_GAINED_PER_POINT:int 	= 1;		public static var OODLES_LOST_ROLLING_ONE:int 	= 10;		public static var BONUS_FACTOR_PER_DOUBLE:int 	= 2;		public static var BONUS_FACTOR_PER_STREAK:int 	= 10;		public static var STREAK_BONUS_INTERVAL:int 	= 5;		public static var MAX_STREAK:int 				= 30;		public static var MAX_ROLLS:int 				= 20;		public static var MAX_DOUBLE_STREAKS:int 		= 3;				public var numRolls:int = 20;		public var totalRollsUsed:uint;		public var score:uint;		public var diceValues:DiceValues;		public var userOodles:int;		public var initialUserOodles:int;		public var oodlesEarned:int;		public var practiceMode:Boolean;		public var numDoublesRolled:int;		public var currentRollStreak:int;		public var currentDoublesStreak:int;		public var statusText:String;		public var highestRoll:int;		public var canCashOut:Boolean;		public var numStreakBonuses:int;		public var bonusPoints:int;		public var numJokers:int;		public var plusMinus:Number;		public var maxRolls:Number;		public var scoreThisRoll: Number;		public var userOodlesSpent:Number = 20;		public var oodlesOption1Available:Boolean = true;		public var oodlesOption2Available:Boolean = true;		public var oodlesOption3Available:Boolean = true;				private var _xml:XML;				public function Model()		{			reset();		}				public function loadXML(url:String) : void 		{				var urlRequest:URLRequest = new URLRequest(url);			var urlLoader:URLLoader = new URLLoader(urlRequest);			urlLoader.addEventListener(Event.COMPLETE, parseXML);		}				private function parseXML(event:Event):void 		{			event.target.removeEventListener(Event.COMPLETE, parseXML);						_xml = XML(event.target.data);						setScoringConstants();						this.userOodlesSpent = _xml.oodles.option[0].@oodles;						dispatchEvent(new Event(Event.INIT));		}				private function setScoringConstants():void		{			Model.BONUS_FACTOR_PER_DOUBLE = _xml.scoring.property.(@id == "bonusFactorPerDouble").@value;			Model.BONUS_FACTOR_PER_STREAK = _xml.scoring.property.(@id == "bonusFactorPerStreak").@value;			Model.OODLES_GAINED_PER_POINT = _xml.scoring.property.(@id == "oodlesGainedPerPoint").@value;			Model.OODLES_LOST_ROLLING_ONE = _xml.scoring.property.(@id == "oodlesLostRollingOne").@value;			Model.OODLES_USED_PER_ROLL 	  = _xml.scoring.property.(@id == "oodlesUsedPerRoll").@value;			Model.STREAK_BONUS_INTERVAL   = _xml.scoring.property.(@id == "streakBonusInterval").@value;			Model.MAX_ROLLS   			  = _xml.scoring.property.(@id == "maxRolls").@value;		}				public function update() : void		{			dispatchEvent( new Event(Event.CHANGE));		}				public function reset() : void		{			scoreThisRoll = 0;			totalRollsUsed = 0;			score = 0;			diceValues = new DiceValues();			statusText = "GAME STARTED";			initialUserOodles = 200;			userOodles = initialUserOodles;			numDoublesRolled = 0;			oodlesEarned = 0;			currentRollStreak = 0;			currentDoublesStreak = 0;			highestRoll = 0;			canCashOut = true;			numStreakBonuses = 0;			bonusPoints = 0;			numJokers = 0;			plusMinus = 0;		}				public function get soundData() : XMLList { return _xml.sound; }				public function get xml() : XML { return _xml; }	}}