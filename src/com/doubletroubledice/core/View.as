package com.doubletroubledice.core {	import com.arn.time.Delay;		import com.dfast.controls.Button;	import com.dfast.controls.LabelButton;	import com.dfast.managers.SoundManager;	import com.dfast.sounds.ChannelType;	import com.dfast.styles.StyleFormat;		import com.doubletroubledice.events.GameEvent;	import com.doubletroubledice.ui.DiceBoard;	import com.doubletroubledice.ui.GameEndScreen;	import com.doubletroubledice.ui.GameStartScreen;	import com.doubletroubledice.ui.JokerBar;	import com.doubletroubledice.ui.ScoreBoard;		import com.greensock.TweenMax;	import com.greensock.OverwriteManager;	import com.greensock.easing.Bounce;	import com.greensock.easing.Back;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	public class View extends Sprite 	{		private var _oodlesIcon1:OodlesIcon;		private var _oodlesIcon2:OodlesIcon;		private var plusMinus : Number;		private var _colorChange:TextFormat;		private var _doublesIcon:DoublesIcon;		private var _lost:Lost;		private var _double6:Double6s;		private var _model:Model;		private var _controller:Controller;		private var _background:Sprite;		private var _diceBoard:DiceBoard;		private var _rollBtn:Button;		private var _cashOutBtn:Button;		private var _soundBtn:Button;		private var _replayBtn:LabelButton;		private var _gameLogBox:TextField;		private var _scoreBox:TextField;		private var _scoreMessage:ScoreMessage;		private var _plusMinusMessage:plusMessage;		private var _bonusMessage:bonusMessage;		private var _gameContstantsBox:TextField;		private var _gameEndBackground:Sprite;		private var _gameEndScreen:GameEndScreen;		private var _gameStartScreen:GameStartScreen;		private var _gameTitleMasthead:GameTitleMasthead;		private var _mainBG:MainBackground;		private var _isDoublesRolled :Boolean = false;		private var _isMultiplier2:Boolean = false;		private var _isMultiplier3:Boolean = false;		private var _isDouble6:Boolean = false;		private var _gameOver:Boolean = false;				private var _oodle:Oodles2;		private var _oodle2:Oodles2;				private var _scoreScoreBoard:ScoreBoard;		private var _turnsScoreBoard:ScoreBoard;				private var _jokerBar:JokerBar;				public function View(model:Model, controller:Controller)		{			OverwriteManager.init(OverwriteManager.AUTO);						_model = model;			_model.addEventListener( Event.CHANGE, update);			_model.addEventListener( Event.INIT, render);						_controller = controller;			_controller.addEventListener( GameEvent.DOUBLES_ROLLED, onGameEvent );			_controller.addEventListener( GameEvent.DOUBLE_JOKERS_ROLLED, onGameEvent );			_controller.addEventListener( GameEvent.DOUBLE_SIXES, onGameEvent );			_controller.addEventListener( GameEvent.JOKER_ROLLED, onGameEvent );			_controller.addEventListener( GameEvent.MILESTONE_ROLL, onGameEvent );			_controller.addEventListener( GameEvent.BONUS_POINTS, onBonusPoints );			_controller.addEventListener( GameEvent.GAME_OVER, onGameEvent );			_controller.addEventListener( GameEvent.MULT_IS_TWO, onGameEvent );			_controller.addEventListener( GameEvent.MULT_IS_THREE, onGameEvent );									addEventListener( GameEvent.GAME_OVER, onGameEvent );					_mainBG = new MainBackground();			addChild(_mainBG);									_turnsScoreBoard = new ScoreBoard();			_turnsScoreBoard.header = "Rolls Remaining";			addChild(_turnsScoreBoard)						_scoreScoreBoard = new ScoreBoard();			_scoreScoreBoard.header = "Score";			addChild(_scoreScoreBoard);									_jokerBar = new JokerBar();			addChild( _jokerBar );											var rollBtnUpState:Sprite = new RollButtonUpState();			var rollBtnDisabledState:Sprite = new RollButtonDisabledState();			_rollBtn = new Button(rollBtnUpState, null, null, null, rollBtnDisabledState);			_rollBtn.addEventListener( MouseEvent.CLICK, placeBet);			addChild(_rollBtn);						_diceBoard = new DiceBoard();			_diceBoard.addEventListener(DiceBoard.DICE_ROLLED, onDiceRolled);			addChild(_diceBoard);						_gameTitleMasthead = new GameTitleMasthead();			addChild(_gameTitleMasthead);						var cashOutBtnUpState:Sprite = new CashOutButtonUpState();			var cashOutBtnDisabledState:Sprite = new CashOutButtonDisabledState();			_cashOutBtn = new Button(cashOutBtnUpState, null, null, null, cashOutBtnDisabledState);			_cashOutBtn.addEventListener( MouseEvent.CLICK, cashOut);			addChild(_cashOutBtn);						var soundBtnUnmuteState:Sprite = new MuteButtonUnmutedState();			var soundBtnMuteState:Sprite = new MuteButtonMutedState();			_soundBtn = new Button(soundBtnUnmuteState, null, null, soundBtnMuteState);			_soundBtn.addEventListener( MouseEvent.CLICK, toggleSound);			addChild(_soundBtn);						_replayBtn = createButton("Game Over! Play Again?");			_replayBtn.addEventListener( MouseEvent.CLICK, reset);			_replayBtn.visible = false;			//addChild(_replayBtn);						_oodle = new Oodles2;			addChild( _oodle );						_oodle2 = new Oodles2;			addChild( _oodle2 );						_gameLogBox = new TextField();			addChild(_gameLogBox);						_scoreBox = new TextField();			addChild(_scoreBox);						_gameContstantsBox = new TextField();			//addChild(_gameContstantsBox);						_scoreMessage = new ScoreMessage();			addChild(_scoreMessage);						_plusMinusMessage = new plusMessage();			addChild(_plusMinusMessage);						_bonusMessage = new bonusMessage();			addChild( _bonusMessage );						_doublesIcon = new DoublesIcon;			addChild( _doublesIcon );			_doublesIcon.visible = false;						_double6 = new Double6s;			addChild( _double6 );			_double6.visible = false;						_lost = new Lost;			addChild( _lost );			_lost.visible = false;						_gameEndBackground = new Sprite();			_gameEndBackground.graphics.beginFill(0);			_gameEndBackground.graphics.drawRect(0, 0, 700, 500);			_gameEndBackground.graphics.endFill();			_gameEndBackground.visible = true;			addChild(_gameEndBackground);						_gameEndScreen = new GameEndScreen();			_gameEndScreen.model = model;			_gameEndScreen.addEventListener( GameEvent.PLAY_AGAIN, reset );			_gameEndScreen.visible = false;			addChild(_gameEndScreen);						_gameStartScreen = new GameStartScreen();			_gameStartScreen.model = model;			_gameStartScreen.addEventListener( GameEvent.START, hideStartScreen );			_gameStartScreen.visible = true;			addChild(_gameStartScreen);						_colorChange = new TextFormat();						update();		}				private function createButton(text:String) : LabelButton		{			var upState:Sprite = new Sprite();			upState.graphics.beginFill(0xFFFFFF);			upState.graphics.drawRect(0, 0, 125, 25);			upState.graphics.endFill();						var overState:Sprite = new Sprite();			overState.graphics.beginFill(0xFF0000);			overState.graphics.drawRect(0, 0, 125, 25);			overState.graphics.endFill();						var disabledState:Sprite = new Sprite();			disabledState.graphics.beginFill(0x3f3f3f);			disabledState.graphics.drawRect(0, 0, 125, 25);			disabledState.graphics.endFill();						var button:LabelButton = new LabelButton(text, upState, overState, null, null, disabledState);			button.setSize(125, 25);						return button;		}		private function render(event:Event = null) : void		{			SoundManager.getInstance().playRegisteredSound("background", ChannelType.MUSIC, 9999);						var scoreboardScale:Number = .63;						_turnsScoreBoard.x = 455;			_turnsScoreBoard.y = 15;			_turnsScoreBoard.scaleX = scoreboardScale;			_turnsScoreBoard.scaleY = _turnsScoreBoard.scaleX;						_scoreScoreBoard.x = 415;			_scoreScoreBoard.y = 70;			_scoreScoreBoard.scaleX = .95;			_scoreScoreBoard.scaleY = .95;						_jokerBar.x = 18;			_jokerBar.y = 420;						var buttonStyle:StyleFormat = new StyleFormat();			buttonStyle.setProperty("textAlign", "center");			buttonStyle.setProperty("autoSize", "left");						_rollBtn.styleFormat = buttonStyle;			_rollBtn.move(414, 429);			_rollBtn.scale = .89;			_rollBtn.render();			_rollBtn.enabled = false;			_soundBtn.styleFormat = buttonStyle;			_soundBtn.move(587, 463);			_soundBtn.scale = .51;			_soundBtn.render();			_cashOutBtn.styleFormat = buttonStyle;			_cashOutBtn.move(587, 430);			_cashOutBtn.scale = .51;			_cashOutBtn.render();						_replayBtn.styleFormat = buttonStyle;			_replayBtn.move(10, 10);			_replayBtn.render();						_diceBoard.x = 38;			_diceBoard.y = 155;						_scoreBox.width = 200;			_scoreBox.height = 170;			_scoreBox.x = 710;			_scoreBox.y = 10;			_scoreBox.border = true;			_scoreBox.borderColor = 0x000000;			_scoreBox.background = true;			_scoreBox.backgroundColor = 0xcfcfcf;						_gameLogBox.width = 200;			_gameLogBox.height = 300;			_gameLogBox.x = 710;			_gameLogBox.y = 190;			_gameLogBox.border = true;			_gameLogBox.borderColor = 0x000000;			_gameLogBox.background = true;			_gameLogBox.backgroundColor = 0xcfcfcf;						_gameContstantsBox.width = 400;			_gameContstantsBox.height = 100;			_gameContstantsBox.x = 10;			_gameContstantsBox.y = 390;			_gameContstantsBox.border = true;			_gameContstantsBox.borderColor = 0x000000;			_gameContstantsBox.background = true;			_gameContstantsBox.backgroundColor = 0xcfcfcf;						_gameEndBackground.alpha = .75;						_gameEndScreen.alpha = 0;			_gameEndScreen.x = (700 - _gameEndScreen.width) / 2;			_gameEndScreen.y = (stage.stageHeight - _gameEndScreen.height) / 2;						_gameStartScreen.x = (stage.stageWidth - _gameStartScreen.width) / 2;			_gameStartScreen.y = (stage.stageHeight - _gameStartScreen.height) / 2;						_scoreMessage.x = _diceBoard.width/2 + _diceBoard.x;			_scoreMessage.y = stage.stageHeight / 2 + 100;			_scoreMessage.alpha = 0;						_bonusMessage.y = 65;			_bonusMessage.x = 615;			_bonusMessage.alpha = 0;			_bonusMessage.scaleX = .5;			_bonusMessage.scaleY = .5;			_bonusMessage.bonus50_mc.visible = false;			_bonusMessage.bonus100_mc.visible = false;			_bonusMessage.bonus150_mc.visible = false;			_bonusMessage.bonus200_mc.visible = false;						_doublesIcon.alpha = 0;			_doublesIcon.x = _diceBoard.width/2 + _diceBoard.x;			_doublesIcon.y = stage.stageHeight / 2 -10 ;			_doublesIcon.scaleX = .5;			_doublesIcon.scaleY = .5;						_double6.x = _diceBoard.width/2 + _diceBoard.x;			_double6.y = _diceBoard.height/2 + _diceBoard.y;			_double6.scaleX = .5;			_double6.scaleY = .5;			_double6.alpha =0;						_lost.alpha = 0;			_lost.x = _diceBoard.width/2 + _diceBoard.x;			_lost.y = stage.stageHeight / 2 - 10;			_lost.scaleX = .5;			_lost.scaleY = .5;						_oodle.x = _scoreScoreBoard.x + 25;			_oodle.y = _scoreScoreBoard.y + 40;						_oodle2.x = _scoreScoreBoard.x + 200;			_oodle2.y = _scoreScoreBoard.y + 40;						_plusMinusMessage.x = _turnsScoreBoard.x + 275;			_plusMinusMessage.y = _turnsScoreBoard.y +60;			_plusMinusMessage.alpha = 0;			_plusMinusMessage.enabled = false;		}				private function update(event:Event = null):void 		{			_turnsScoreBoard.value = (_model.numRolls > -1) ? _model.numRolls : 0 ;			_cashOutBtn.enabled = _model.canCashOut;			_jokerBar.update(_model.numJokers);			_scoreScoreBoard.value = _model.score;		}				private function placeBet(event:MouseEvent):void 		{			_rollBtn.enabled = false;			_model.canCashOut = false;						_controller.placeBet();						Delay.create( rollDice, .5 );		}				private function rollDice():void 		{			_diceBoard.rollDice();						SoundManager.getInstance().stop("other");			SoundManager.getInstance().playRegisteredSound("diceRoll");		}				private function onDiceRolled(event:Event):void 		{			_rollBtn.enabled = true;			_controller.setScore(_diceBoard.diceValues);						if (_model.numRolls == 0)				TweenMax.delayedCall( 1, cashOut, [new MouseEvent(MouseEvent.CLICK)] );						checkForDoublesAndMultipliers();								TweenMax.to( _scoreMessage, .75, { alpha: 1, y: _scoreMessage.y - 20, ease: Back.easeOut, onComplete: onScoreMessageAnimationComplete } );		}				private function checkForDoublesAndMultipliers():void		{			if ( _gameOver ) {				trace( "checkForDoublesAndMultipliers : game over" );				_scoreMessage.visible = false;				_gameOver = true;			}			else if ( _isDouble6 ) {				trace( "checkForDoublesAndMultipliers : double sixes" );				_scoreMessage.visible = false;				_scoreMessage.gotoAndStop("normal");				_isDouble6 = false;			}			else if ( _isDoublesRolled && _isMultiplier2 ) {				trace( "checkForDoublesAndMultipliers : doubles and multiplier 2" );					_scoreMessage.gotoAndStop("doubleTwo");				_scoreMessage.visible = true;				_scoreMessage.roll.txt.text = String( _model.diceValues.dice1 + _model.diceValues.dice2);				_scoreMessage.score.txt.text = String( _model.scoreThisRoll);				_isDoublesRolled = false;				_isMultiplier2 = false;			}			else if (_isDoublesRolled && _isMultiplier3) {				trace( "checkForDoublesAndMultipliers : doubles and multiplier 3" );					_scoreMessage.visible = true;				_scoreMessage.gotoAndStop("doubleThree");				_scoreMessage.roll.txt.text = String( _model.diceValues.dice1 + _model.diceValues.dice2);				_scoreMessage.score.txt.text = String( _model.scoreThisRoll);				_isDoublesRolled = false;				_isMultiplier3 = false;			}			else if (_isDoublesRolled ) {				trace( "checkForDoublesAndMultipliers : doubles" );					_scoreMessage.visible = true;				_scoreMessage.gotoAndStop("doubles");				_scoreMessage.roll.txt.text = String( _model.diceValues.dice1 + _model.diceValues.dice2);				_scoreMessage.score.txt.text = String( _model.scoreThisRoll);				_isDoublesRolled = false;			}			else if (_isMultiplier2 && !_isDoublesRolled && !_double6) {				trace( "checkForDoublesAndMultipliers : multiplier2" );				_scoreMessage.visible = true;				_scoreMessage.gotoAndStop("multOne");				_scoreMessage.roll.txt.text = String( _model.diceValues.dice1 + _model.diceValues.dice2);				_scoreMessage.score.txt.text = String( _model.scoreThisRoll);				_isMultiplier2 = false;			}			else if (_isMultiplier3 && !_isDoublesRolled && !_double6) {				trace( "checkForDoublesAndMultipliers : multiplier3" );					_scoreMessage.visible = true;				_scoreMessage.gotoAndStop("multTwo");				_scoreMessage.roll.txt.text = String( _model.diceValues.dice1 + _model.diceValues.dice2);				_scoreMessage.score.txt.text = String( _model.scoreThisRoll);				_isMultiplier3 = false;			}else {				trace( "checkForDoublesAndMultipliers : normal" );					_scoreMessage.visible = true;				_scoreMessage.gotoAndStop("normal");				_scoreMessage.roll.txt.text = String( _model.diceValues.dice1 + _model.diceValues.dice2);				_scoreMessage.score.txt.text = String( _model.scoreThisRoll);			}		}				private function onScoreMessageAnimationComplete() : void 		{			_scoreScoreBoard.value = _model.score;							if( _isDouble6 ){				_scoreMessage.visible = false;			}								TweenMax.to( _scoreMessage, .75, { alpha: 0, y: _scoreMessage.y + 20, delay:2, ease: Back.easeOut} );			plusMinus = _controller.calculateOodles();						if(_plusMinusMessage.visible == false){				_plusMinusMessage.visible = true;			}						if(plusMinus >= 0){				_colorChange.color = 0x009900;				_plusMinusMessage.txt.text = "+" +  String(plusMinus);			}						if(plusMinus < 0){				_colorChange.color = 0xE90000;				_plusMinusMessage.txt.text = String(plusMinus);			}						_plusMinusMessage.txt.setTextFormat(_colorChange);		}				private function onGameEvent(event:GameEvent):void 		{			switch(event.type) {								case GameEvent.GAME_OVER:					_gameOver = true;					_scoreMessage.visible = false;					_lost.visible = true;					TweenMax.to( _lost, .75, { alpha: 1, scaleX:1, scaleY:1, ease: Back.easeOut} );					TweenMax.to( _lost, .4, { alpha: 0, scaleX:.5, scaleY:.5, delay:3, ease: Back.easeOut, onComplete: hideLostIcon  } );					changeUIForGameEnd();					break;									case GameEvent.DOUBLE_SIXES:					SoundManager.getInstance().playRegisteredSound("doubleSixes");					_double6.visible = true;					TweenMax.to( _double6, .75, { alpha: 1, scaleX:1, scaleY:1, ease: Back.easeOut} );					TweenMax.to( _double6, .4, { alpha: 0, scaleX:.5, scaleY:.5, delay:3, ease: Back.easeOut });					_isDouble6 = true;					_scoreMessage.visible = false;					break;									case GameEvent.DOUBLES_ROLLED:					_diceBoard.playStarAnimation();					_doublesIcon.visible = true;					_isDoublesRolled = true;					_scoreMessage.visible = true;					if( !_isDouble6 ){						TweenMax.to( _doublesIcon, .75, { alpha: 1, scaleX:1, scaleY:1, ease: Back.easeOut} );						TweenMax.to( _doublesIcon, .4, { alpha: 0, scaleX:.5, scaleY:.5, delay:3, ease: Back.easeOut, onComplete: hideDoublesIcon  } );						_isDouble6 = false;					}										SoundManager.getInstance().playRegisteredSound("doubles");					_mainBG.gotoAndPlay("intro");					break;									case GameEvent.MULT_IS_TWO:					_scoreMessage.visible = true;					_isMultiplier2 = true;										break;									case GameEvent.MULT_IS_THREE:					_scoreMessage.visible = true;					_isMultiplier3 = true;										break;									case GameEvent.JOKER_ROLLED:					_scoreMessage.visible = true;					SoundManager.getInstance().playRegisteredSound("jokerRolled");					break;									case GameEvent.DOUBLE_JOKERS_ROLLED:					_scoreMessage.visible = false;					SoundManager.getInstance().playRegisteredSound("doubleJokers");					break;									case GameEvent.MILESTONE_ROLL:					_scoreMessage.visible = true;					SoundManager.getInstance().playRegisteredSound("milestoneRoll", "other");					break;			}		}				private function hideDoublesIcon() : void		{			_doublesIcon.visible = false;		}				private function hideLostIcon() : void		{			_lost.visible = false;			cashOut();		}				private function onBonusPoints( event:GameEvent ) : void		{			if (!_gameOver) {					switch(event.data.points) 				{					case 50:						_bonusMessage.bonus50_mc.visible = true;						_bonusMessage.bonus100_mc.visible = false;						_bonusMessage.bonus150_mc.visible = false;						_bonusMessage.bonus200_mc.visible = false;						break;										case 100:						_bonusMessage.bonus50_mc.visible = false;						_bonusMessage.bonus100_mc.visible = true;						_bonusMessage.bonus150_mc.visible = false;						_bonusMessage.bonus200_mc.visible = false;						break;										case 150:						_bonusMessage.bonus50_mc.visible = false;						_bonusMessage.bonus100_mc.visible = false;						_bonusMessage.bonus150_mc.visible = true;						_bonusMessage.bonus200_mc.visible = false;						break;										case 200:						_bonusMessage.bonus50_mc.visible = false;						_bonusMessage.bonus100_mc.visible = false;						_bonusMessage.bonus150_mc.visible = false;						_bonusMessage.bonus200_mc.visible = true;						break;				}								TweenMax.to( _bonusMessage, .75, { alpha: 1, scaleX:1.5, scaleY:1.5, ease: Back.easeOut } );				TweenMax.to( _bonusMessage, .75, { alpha: 0, scaleX:.5, scaleY:.5, delay:2.5, ease: Back.easeOut } );			}		}				private function reset(event:Event):void 		{			_replayBtn.visible = false;			_rollBtn.enabled = true;			_cashOutBtn.enabled = true;			_controller.reset();			_model.update();							_jokerBar.reset();			hideGameEndScreen();						plusMinus = 0;			_plusMinusMessage.visible = false;		}				private function hideStartScreen(event:GameEvent) : void		{					_controller.reportGameStarted();						if(SoundManager.getInstance().isChannelMuted(ChannelType.MUSIC) ) 				_soundBtn.selected = true;						TweenMax.to( _gameStartScreen, .75, { alpha: 0, onComplete: function() { _gameStartScreen.visible = false; } } );			TweenMax.to( _gameEndBackground, .75, { alpha: 0, onComplete: function() { _gameEndBackground.visible = false; } } );			_mainBG.gotoAndPlay("intro");			Delay.create( startJokerBarIntro, 1.3 );		}				private function startJokerBarIntro() : void		{					_jokerBar.gotoAndPlay("intro");			Delay.create( enabledRollButton, 1.5 );		}				private function enabledRollButton() : void		{					_rollBtn.enabled = true;		}				private function showGameEndScreen() : void		{			_gameEndScreen.update();						_gameEndScreen.visible = true;			_gameEndScreen.alpha = 1;						_gameEndBackground.visible = true;			_gameEndBackground.alpha = 0;						TweenMax.from( _gameEndScreen, .75, { y: 700, ease: Bounce.easeOut, alpha: 1, delay: .5 } );			TweenMax.to( _gameEndBackground, .75, { alpha: 0.75 } );						_controller.reportGameScore();		}				private function hideGameEndScreen() : void		{					TweenMax.to( _gameEndScreen, .75, { alpha: 0, onComplete: function() { _gameEndScreen.visible = false; } } );			TweenMax.to( _gameEndBackground, .75, { alpha: 0, onComplete: function() { _gameEndBackground.visible = false; } } );		}				private function cashOut(event:MouseEvent = null):void 		{				changeUIForGameEnd();						_gameLogBox.scrollV = _gameLogBox.maxScrollV;						showGameEndScreen();		}						private function changeUIForGameEnd(event:MouseEvent = null):void 		{			_rollBtn.enabled = false;			_cashOutBtn.enabled = false;			_replayBtn.visible = true;			_model.canCashOut = false;		}				private function toggleSound(event:MouseEvent) : void		{			_soundBtn.selected = !_soundBtn.selected;						if (_soundBtn.selected)				SoundManager.getInstance().mute();			else				SoundManager.getInstance().unmute();		}	}}