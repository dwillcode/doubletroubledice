package com.doubletroubledice.core {	import com.dfast.utils.MathUtils;	import com.dfast.managers.SoundManager;	import com.doubletroubledice.events.GameEvent;	import com.doubletroubledice.valueObjects.DiceValues;		import flash.events.EventDispatcher;	import flash.external.ExternalInterface;	/**	 * The Controller class contains the game logic and is used to add/modify data found in the Model.	 * 	 * @author Derrick Williams 	 * @author Robert Lavoie	 */	public class Controller extends EventDispatcher 	{		private var _model:Model;				public function Controller(model:Model):void		{			_model = model;		}				/**		 * Alerts the external environment that the game has started.		 */		public function reportGameStarted():void		{			if(!_model.practiceMode) ExternalInterface.call("PlayStartD", _model.userOodlesSpent);		}				/**		 * Alerts the external environment that the player's final score is avaliable.		 */		public function reportGameScore():void		{			if(!_model.practiceMode) ExternalInterface.call("PostScore", _model.score);		}				/**		 * 		 */		public function placeBet() : void		{			_model.userOodles -= Model.OODLES_USED_PER_ROLL;						_model.numRolls--;			_model.totalRollsUsed++;			_model.update();		}						/**		 * Updates the score based on the given dice roll values.		 * @param	diceValues	A data object containing the rolled dice values.		 */		public function setScore(diceValues:DiceValues) : void		{			var dice1:int = diceValues.dice1;			var dice2:int = diceValues.dice2;			var scoreThisRoll:int = 0;			var jokersThisRoll:int = 0;			var rolledDoubleSixes:Boolean = false;			var isGameOver:Boolean = false;						_model.diceValues = diceValues;						// check for doubles			if (dice1 == dice2) {								_model.numRolls++;								// double 1's				if(dice1 == 1){					_model.statusText = "\tDouble 1's.";					jokersThisRoll += 2;										// check for maximum jokers reached					if (_model.numJokers + jokersThisRoll >= 4) {						scoreThisRoll = 0;						_model.score = 0;						_model.statusText = "\t5 Jokers. GAME OVER!";						isGameOver = true;						dispatchEvent( new GameEvent(GameEvent.GAME_OVER));					} else {						scoreThisRoll = 4;					}										dispatchEvent(new GameEvent(GameEvent.DOUBLE_JOKERS_ROLLED));				} 				// other doubles				else {					_model.currentDoublesStreak++;										// one roll before doubles streak reached					if (_model.currentDoublesStreak == Model.MAX_DOUBLE_STREAKS - 1) {						//dispatchEvent(new GameEvent(GameEvent.MILESTONE_ROLL));					}										// doubles streak reached					if (_model.currentDoublesStreak == Model.MAX_DOUBLE_STREAKS) {						_model.statusText = "\tThree doubles in a row. \nGAME OVER!";						_model.bonusPoints = 0;						_model.score = 0;						isGameOver = true;						dispatchEvent(new GameEvent(GameEvent.GAME_OVER));					} 					else {						// double 6's						if (dice1 == 6){														rolledDoubleSixes = true;														dispatchEvent(new GameEvent(GameEvent.DOUBLE_SIXES));						} else {							scoreThisRoll = (dice1 * 2) * Model.BONUS_FACTOR_PER_DOUBLE;						}																		_model.currentRollStreak++;						_model.numDoublesRolled++;						_model.canCashOut = false;						dispatchEvent( new GameEvent(GameEvent.DOUBLES_ROLLED) );					}				}			} 						// check for 1's			else if(dice1 == 1 || dice2 == 1){				_model.statusText = "\tYou rolled a 1.";								_model.currentDoublesStreak = 0;				_model.canCashOut = true;				jokersThisRoll++;								// check for maximum jokers reached				if (_model.numJokers + jokersThisRoll >= 4) {					scoreThisRoll = 0;					_model.score = 0;					isGameOver = true;					dispatchEvent( new GameEvent(GameEvent.GAME_OVER));				} else {					scoreThisRoll += (dice1 + dice2);					_model.currentRollStreak++;				}									dispatchEvent(new GameEvent(GameEvent.JOKER_ROLLED));			}						// no 1's or doubles			else {				_model.statusText = "\tAdd score. Take your next roll.";				scoreThisRoll = (dice1 + dice2);				_model.currentDoublesStreak = 0;				_model.currentRollStreak++;				_model.canCashOut = true;			}			// calculate multiplier			var multiplierFactor:int = (_model.numJokers <= 1) ? 1 : _model.numJokers;			scoreThisRoll *= multiplierFactor;			_model.statusText += "\n\tScore This Roll with Multiplier: " + scoreThisRoll + "\t";			_model.numJokers += jokersThisRoll;						if(multiplierFactor == 2){				dispatchEvent(new GameEvent(GameEvent.MULT_IS_TWO));			}						if(multiplierFactor == 3){				dispatchEvent(new GameEvent(GameEvent.MULT_IS_THREE));			}						// add double sixes bonus			if(rolledDoubleSixes && !isGameOver) {				_model.bonusPoints += 100;				scoreThisRoll += 100;			}						_model.scoreThisRoll = scoreThisRoll;			if(!isGameOver) scoreThisRoll += getRollStreakBonusPoints();							_model.statusText += "\n\tScore This Roll with Bonus: " + scoreThisRoll + "\t";						if (scoreThisRoll > _model.highestRoll) 				_model.highestRoll = scoreThisRoll;							_model.score += scoreThisRoll;			_model.update();		}						/**		 * Gets the bonus points for the current roll streak;		 * @return An integer for the bonus points the player earned.		 */		private function getRollStreakBonusPoints():int		{			var bonusPoints:int = 0;						// check for bonus streak			if (_model.currentRollStreak > 0 && _model.currentRollStreak % Model.STREAK_BONUS_INTERVAL == 0) {								// check if maximum allowed bonus streak is reached				var streak:int = (_model.currentRollStreak > Model.MAX_STREAK ) ? Model.MAX_STREAK : _model.currentRollStreak;								bonusPoints = streak * Model.BONUS_FACTOR_PER_STREAK;				_model.bonusPoints += bonusPoints;								dispatchEvent( new GameEvent( GameEvent.BONUS_POINTS, false, false, { points: bonusPoints } ) );			} 			// one roll before bonus streak reached			else if( _model.currentRollStreak > 0 && (_model.currentRollStreak + 1)%Model.STREAK_BONUS_INTERVAL == 0){				dispatchEvent(new GameEvent(GameEvent.MILESTONE_ROLL));			}						_model.bonusPoints += bonusPoints;						if (bonusPoints > 0) 				_model.numStreakBonuses++;							return bonusPoints;		}						public function getOodlesEarned() : int		{			return _model.score - (_model.numRolls * Model.OODLES_USED_PER_ROLL);		}				public function calculateOodles():int		{			_model.plusMinus = _model.score - (Model.MAX_ROLLS * Model.OODLES_USED_PER_ROLL);			return _model.plusMinus;		}				public function reset() : void		{			_model.reset();		}	}}